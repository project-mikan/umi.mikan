syntax = "proto3";

package diary;

import "entity/entity.proto";

option go_package = "github.com/project-mikan/umi.mikan/backend/infrastructure/grpc";

// DiaryService は日記エントリの作成・読み取り・更新・削除（CRUD）と
// AI要約生成機能を提供するサービスです。
// エンティティとの紐付けにより、固有名詞のハイライト表示や検索が可能です。
service DiaryService {
  // CreateDiaryEntry は新しい日記エントリを作成します。
  // 1日1エントリの制約があり、同じ日付に複数のエントリは作成できません。
  // エンティティとの紐付け（diary_entities）もトランザクション内で同時に作成されます。
  //
  // 例:
  //   request: { content: "今日は友人と会った", date: { year: 2025, month: 10, day: 9 }, diary_entities: [...] }
  //   response: { entry: { id: "uuid", content: "...", ... } }
  //
  // エラー:
  //   - AlreadyExists: 指定された日付の日記が既に存在する
  //   - InvalidArgument: 日付が不正
  rpc CreateDiaryEntry(CreateDiaryEntryRequest) returns (CreateDiaryEntryResponse);

  // UpdateDiaryEntry は既存の日記エントリを更新します。
  // エンティティとの紐付けも同時に更新されます（既存の紐付けは全て削除され、新しい紐付けが作成されます）。
  //
  // 例:
  //   request: { id: "uuid", content: "更新された内容", date: { year: 2025, month: 10, day: 9 }, diary_entities: [...] }
  //   response: { entry: { id: "uuid", content: "更新された内容", ... } }
  //
  // エラー:
  //   - NotFound: 日記エントリが見つからない
  //   - PermissionDenied: 他のユーザーの日記にアクセスしようとした
  rpc UpdateDiaryEntry(UpdateDiaryEntryRequest) returns (UpdateDiaryEntryResponse);

  // DeleteDiaryEntry は日記エントリを削除します。
  // 関連するエンティティとの紐付け（diary_entities）もカスケード削除されます。
  //
  // エラー:
  //   - NotFound: 日記エントリが見つからない
  //   - PermissionDenied: 他のユーザーの日記にアクセスしようとした
  rpc DeleteDiaryEntry(DeleteDiaryEntryRequest) returns (DeleteDiaryEntryResponse);

  // GetDiaryEntry は指定された日付の日記エントリを取得します。
  // エンティティとの紐付け情報も含まれます。
  //
  // 例:
  //   request: { date: { year: 2025, month: 10, day: 9 } }
  //   response: { entry: { id: "uuid", content: "...", diary_entities: [...] } }
  //
  // エラー:
  //   - NotFound: 指定された日付の日記が存在しない
  rpc GetDiaryEntry(GetDiaryEntryRequest) returns (GetDiaryEntryResponse);

  // GetDiaryEntries は指定された複数の日付の日記エントリを取得します。
  // ホームでの直近3日表示や、過去数年分の取得など、柔軟な取得が可能です。
  //
  // 例:
  //   request: { dates: [{ year: 2025, month: 10, day: 9 }, { year: 2025, month: 10, day: 8 }] }
  //   response: { entries: [{ id: "uuid1", ... }, { id: "uuid2", ... }] }
  //
  // エラー: なし（存在する日記のみ返される）
  rpc GetDiaryEntries(GetDiaryEntriesRequest) returns (GetDiaryEntriesResponse);

  // GetDiaryEntriesByMonth は指定された月の全日記エントリを取得します。
  //
  // 例:
  //   request: { month: { year: 2025, month: 10 } }
  //   response: { entries: [{ id: "uuid1", date: { year: 2025, month: 10, day: 1 }, ... }, ...] }
  //
  // エラー: なし（存在する日記のみ返される）
  rpc GetDiaryEntriesByMonth(GetDiaryEntriesByMonthRequest) returns (GetDiaryEntriesByMonthResponse);

  // SearchDiaryEntries はキーワードで日記を全文検索します。
  // PostgreSQLのLIKE検索を使用しています。
  //
  // 例:
  //   request: { keyword: "友人" }
  //   response: { searched_keyword: "友人", entries: [{ id: "uuid", content: "今日は友人と...", ... }] }
  //
  // エラー: なし（見つからない場合は空配列）
  rpc SearchDiaryEntries(SearchDiaryEntriesRequest) returns (SearchDiaryEntriesResponse);

  // GenerateMonthlySummary は指定された月の日記をLLMで要約します。
  // ユーザーのLLMキー設定が必要です。既存のサマリーがある場合は上書きされます。
  //
  // 例:
  //   request: { month: { year: 2025, month: 10 } }
  //   response: { summary: { id: "uuid", month: { year: 2025, month: 10 }, summary: "10月は...", ... } }
  //
  // エラー:
  //   - NotFound: LLMキーが設定されていない、または対象月に日記が存在しない
  //   - Internal: LLM API呼び出しエラー
  rpc GenerateMonthlySummary(GenerateMonthlySummaryRequest) returns (GenerateMonthlySummaryResponse);

  // GetMonthlySummary は指定された月のサマリーを取得します。
  //
  // 例:
  //   request: { month: { year: 2025, month: 10 } }
  //   response: { summary: { id: "uuid", month: { year: 2025, month: 10 }, summary: "10月は...", ... } }
  //
  // エラー:
  //   - NotFound: サマリーが存在しない
  rpc GetMonthlySummary(GetMonthlySummaryRequest) returns (GetMonthlySummaryResponse);

  // GenerateDailySummary は指定された日記をLLMで要約します。
  // ユーザーのLLMキー設定が必要です。既存のサマリーがある場合は上書きされます。
  //
  // 例:
  //   request: { diary_id: "uuid" }
  //   response: { summary: { id: "uuid", diary_id: "uuid", summary: "今日は...", ... } }
  //
  // エラー:
  //   - NotFound: LLMキーが設定されていない、または日記が存在しない
  //   - PermissionDenied: 他のユーザーの日記にアクセスしようとした
  //   - Internal: LLM API呼び出しエラー
  rpc GenerateDailySummary(GenerateDailySummaryRequest) returns (GenerateDailySummaryResponse);

  // GetDailySummary は指定された日付のサマリーを取得します。
  //
  // 例:
  //   request: { date: { year: 2025, month: 10, day: 9 } }
  //   response: { summary: { id: "uuid", date: { year: 2025, month: 10, day: 9 }, summary: "今日は...", ... } }
  //
  // エラー:
  //   - NotFound: サマリーが存在しない
  rpc GetDailySummary(GetDailySummaryRequest) returns (GetDailySummaryResponse);

  // GetLatestTrend は直近3日間の日記のトレンド分析を取得します。
  // Redisに保存された分析結果を返します。
  //
  // 例:
  //   request: {}
  //   response: { overall_summary: "...", health_mood: "...", activities: "...", concerns: "...", period_start: "2025-10-10T00:00:00Z", period_end: "2025-10-16T23:59:59Z", generated_at: "2025-10-17T04:00:00Z" }
  //
  // エラー:
  //   - NotFound: トレンド分析が存在しない
  rpc GetLatestTrend(GetLatestTrendRequest) returns (GetLatestTrendResponse);

  // TriggerLatestTrend はトレンド分析の生成を手動でトリガーします（デバッグ用）。
  // 非production環境でのみ使用可能です。
  //
  // 例:
  //   request: {}
  //   response: { success: true, message: "トレンド分析の生成をキューに追加しました" }
  //
  // エラー:
  //   - PermissionDenied: production環境では使用不可
  //   - NotFound: LLMキーが設定されていない
  rpc TriggerLatestTrend(TriggerLatestTrendRequest) returns (TriggerLatestTrendResponse);
}

message YMD {
  uint32 year = 1;
  uint32 month = 2;
  uint32 day = 3;
}
message YM {
  uint32 year = 1;
  uint32 month = 2;
}

// 日記エントリのメッセージ
message DiaryEntry {
  string id = 1; // 日記ID
  YMD date = 2; // 日付
  string content = 3; // 内容
  int64 created_at = 4; // 作成日時（Unix timestamp）
  int64 updated_at = 5; // 更新日時（Unix timestamp）
  repeated DiaryEntityOutput diary_entities = 6; // エンティティと位置情報のリスト
}

// エンティティ出力（取得時）
message DiaryEntityOutput {
  string entity_id = 1;
  repeated entity.Position positions = 2; // 位置情報（alias_idを含む）
}

// エンティティと位置情報
message DiaryEntityInput {
  string entity_id = 1;
  repeated entity.Position positions = 2; // 位置情報（alias_idを含む）
}

// 新しい日記エントリを作成するためのリクエスト
message CreateDiaryEntryRequest {
  string content = 1;
  YMD date = 2;
  repeated DiaryEntityInput diary_entities = 3; // エンティティと位置情報のリスト
}

// 日記エントリを作成した結果を返すレスポンス
message CreateDiaryEntryResponse {
  DiaryEntry entry = 1;
}

// 特定の日記エントリを取得するためのリクエスト
message GetDiaryEntryRequest {
  YMD date = 1; // 日付を指定して取得
}

// 複数日記エントリを取得するためのリクエスト (e.g., by range or count)
message GetDiaryEntriesRequest {
  repeated YMD dates = 1; // 取得したい日付の配列
}

// 月ごとに日記エントリを取得するためのリクエスト
message GetDiaryEntriesByMonthRequest {
  YM month = 1; // 年月を指定
}

message SearchDiaryEntriesRequest {
  string keyword = 1;
}

message SearchDiaryEntriesResponse {
  string searched_keyword = 1; // 実際に検索した単語
  repeated DiaryEntry entries = 2;
}

message GetDiaryEntriesResponse {
  repeated DiaryEntry entries = 1;
}

message GetDiaryEntriesByMonthResponse {
  repeated DiaryEntry entries = 1;
}

// 日記エントリを取得した結果を返すレスポンス
message GetDiaryEntryResponse {
  DiaryEntry entry = 1;
}

// 日記エントリを更新するためのリクエスト
message UpdateDiaryEntryRequest {
  string id = 1;
  string title = 2;
  string content = 3;
  YMD date = 4;
  repeated DiaryEntityInput diary_entities = 5; // エンティティと位置情報のリスト
}

// 更新された日記エントリを返すレスポンス
message UpdateDiaryEntryResponse {
  DiaryEntry entry = 1;
}

// 日記エントリを削除するためのリクエスト
message DeleteDiaryEntryRequest {
  string id = 1;
}

// 削除操作の結果を返すレスポンス
message DeleteDiaryEntryResponse {
  bool success = 1;
}

// 月サマリー
message MonthlySummary {
  string id = 1;
  YM month = 2;
  string summary = 3;
  int64 created_at = 4;
  int64 updated_at = 5;
}

// 月ごとのサマリー生成リクエスト
message GenerateMonthlySummaryRequest {
  YM month = 1;
}

// 月ごとのサマリー生成レスポンス
message GenerateMonthlySummaryResponse {
  MonthlySummary summary = 1;
}

// 月ごとのサマリー取得リクエスト
message GetMonthlySummaryRequest {
  YM month = 1;
}

// 月ごとのサマリー取得レスポンス
message GetMonthlySummaryResponse {
  MonthlySummary summary = 1;
}

// 日サマリー
message DailySummary {
  string id = 1;
  string diary_id = 2;
  YMD date = 3;
  string summary = 4;
  int64 created_at = 5;
  int64 updated_at = 6;
}

// 日ごとのサマリー生成リクエスト
message GenerateDailySummaryRequest {
  string diary_id = 1;
}

// 日ごとのサマリー生成レスポンス
message GenerateDailySummaryResponse {
  DailySummary summary = 1;
}

// 日ごとのサマリー取得リクエスト
message GetDailySummaryRequest {
  YMD date = 1;
}

// 日ごとのサマリー取得レスポンス
message GetDailySummaryResponse {
  DailySummary summary = 1;
}

// 直近トレンド分析取得リクエスト
message GetLatestTrendRequest {
  // user_id は認証情報から取得
}

// 直近トレンド分析取得レスポンス
message GetLatestTrendResponse {
  string overall_summary = 1; // 全体的な様子（1行）
  string health_mood = 2; // 体調・気分の傾向（2-3文）
  string activities = 3; // 活動・行動パターン（2-3文）
  string concerns = 4; // 気になること（1-2文）
  string period_start = 5; // 分析期間開始（ISO 8601形式）
  string period_end = 6; // 分析期間終了（ISO 8601形式）
  string generated_at = 7; // 生成日時（ISO 8601形式）
}

// 直近トレンド分析生成トリガーリクエスト（デバッグ用）
message TriggerLatestTrendRequest {
  // user_id は認証情報から取得
}

// 直近トレンド分析生成トリガーレスポンス（デバッグ用）
message TriggerLatestTrendResponse {
  bool success = 1; // 成功フラグ
  string message = 2; // メッセージ
}
