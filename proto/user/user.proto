syntax = "proto3";

package user;

option go_package = "github.com/project-mikan/umi.mikan/backend/infrastructure/grpc";

service UserService {
  // ユーザー名変更
  rpc UpdateUserName(UpdateUserNameRequest) returns (UpdateUserNameResponse);

  // パスワード変更
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);

  // LLMキー更新
  rpc UpdateLLMKey(UpdateLLMKeyRequest) returns (UpdateLLMKeyResponse);

  // ユーザー情報取得
  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);

  // LLMキー削除
  rpc DeleteLLMKey(DeleteLLMKeyRequest) returns (DeleteLLMKeyResponse);

  // アカウント削除
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse);

  // 自動要約設定更新
  rpc UpdateAutoSummarySettings(UpdateAutoSummarySettingsRequest) returns (UpdateAutoSummarySettingsResponse);

  // 自動要約設定取得
  rpc GetAutoSummarySettings(GetAutoSummarySettingsRequest) returns (GetAutoSummarySettingsResponse);

  // Pub/Sub処理状況メトリクス取得
  rpc GetPubSubMetrics(GetPubSubMetricsRequest) returns (GetPubSubMetricsResponse);
}

// ユーザー名更新用のリクエスト
message UpdateUserNameRequest {
  string new_name = 1;
}

// ユーザー名更新用のレスポンス
message UpdateUserNameResponse {
  bool success = 1;
  string message = 2;
}

// パスワード変更用のリクエスト
message ChangePasswordRequest {
  string current_password = 1;
  string new_password = 2;
}

// パスワード変更用のレスポンス
message ChangePasswordResponse {
  bool success = 1;
  string message = 2;
}

// LLMキー更新用のリクエスト
message UpdateLLMKeyRequest {
  int32 llm_provider = 1; // 1:Gemini
  string key = 2;
}

// LLMキー更新用のレスポンス
message UpdateLLMKeyResponse {
  bool success = 1;
  string message = 2;
}

// ユーザー情報取得用のリクエスト
message GetUserInfoRequest {
  // 空のリクエスト（認証はヘッダーから）
}

// ユーザー情報取得用のレスポンス
message GetUserInfoResponse {
  string name = 1;
  string email = 2;
  // LLMキー情報（存在する場合）
  repeated LLMKeyInfo llm_keys = 3;
}

// LLMキー情報
message LLMKeyInfo {
  int32 llm_provider = 1; // 1:Gemini
  string key = 2;
  bool auto_summary_daily = 3; // 日毎の自動要約生成
  bool auto_summary_monthly = 4; // 月毎の自動要約生成
}

// LLMキー削除用のリクエスト
message DeleteLLMKeyRequest {
  int32 llm_provider = 1; // 1:Gemini
}

// LLMキー削除用のレスポンス
message DeleteLLMKeyResponse {
  bool success = 1;
  string message = 2;
}

// アカウント削除用のリクエスト
message DeleteAccountRequest {
  // 空のリクエスト（認証はヘッダーから）
}

// アカウント削除用のレスポンス
message DeleteAccountResponse {
  bool success = 1;
  string message = 2;
}

// 自動要約設定更新用のリクエスト
message UpdateAutoSummarySettingsRequest {
  int32 llm_provider = 1; // 1:Gemini
  bool auto_summary_daily = 2; // 日毎の自動要約生成
  bool auto_summary_monthly = 3; // 月毎の自動要約生成
}

// 自動要約設定更新用のレスポンス
message UpdateAutoSummarySettingsResponse {
  bool success = 1;
  string message = 2;
}

// 自動要約設定取得用のリクエスト
message GetAutoSummarySettingsRequest {
  int32 llm_provider = 1; // 1:Gemini
}

// 自動要約設定取得用のレスポンス
message GetAutoSummarySettingsResponse {
  bool auto_summary_daily = 1; // 日毎の自動要約生成
  bool auto_summary_monthly = 2; // 月毎の自動要約生成
}

// Pub/Subメトリクス取得用のリクエスト
message GetPubSubMetricsRequest {
  // 空のリクエスト（認証はヘッダーから）
}

// Pub/Subメトリクス取得用のレスポンス
message GetPubSubMetricsResponse {
  // 過去24時間の処理状況
  repeated HourlyMetrics hourly_metrics = 1;
  // 処理中のタスク
  repeated ProcessingTask processing_tasks = 2;
  // 統計情報
  MetricsSummary summary = 3;
}

// 1時間ごとのメトリクス
message HourlyMetrics {
  int64 timestamp = 1; // Unix timestamp of the hour
  int32 daily_summaries_processed = 2;
  int32 monthly_summaries_processed = 3;
  int32 daily_summaries_failed = 4;
  int32 monthly_summaries_failed = 5;
}

// 処理中のタスク
message ProcessingTask {
  string task_type = 1; // "daily_summary" or "monthly_summary"
  string date = 2; // YYYY-MM-DD for daily, YYYY-MM for monthly
  int64 started_at = 3; // Unix timestamp
}

// メトリクス統計情報
message MetricsSummary {
  int32 total_daily_summaries = 1;
  int32 total_monthly_summaries = 2;
  int32 pending_daily_summaries = 3;
  int32 pending_monthly_summaries = 4;
  bool auto_summary_daily_enabled = 5;
  bool auto_summary_monthly_enabled = 6;
}