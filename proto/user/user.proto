syntax = "proto3";

package user;

option go_package = "github.com/project-mikan/umi.mikan/backend/infrastructure/grpc";

service UserService {
  // ユーザー名変更
  rpc UpdateUserName(UpdateUserNameRequest) returns (UpdateUserNameResponse);

  // パスワード変更
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);

  // LLMキー更新
  rpc UpdateLLMKey(UpdateLLMKeyRequest) returns (UpdateLLMKeyResponse);

  // ユーザー情報取得
  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);

  // LLMキー削除
  rpc DeleteLLMKey(DeleteLLMKeyRequest) returns (DeleteLLMKeyResponse);

  // アカウント削除
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse);
}

// ユーザー名更新用のリクエスト
message UpdateUserNameRequest {
  string new_name = 1;
}

// ユーザー名更新用のレスポンス
message UpdateUserNameResponse {
  bool success = 1;
  string message = 2;
}

// パスワード変更用のリクエスト
message ChangePasswordRequest {
  string current_password = 1;
  string new_password = 2;
}

// パスワード変更用のレスポンス
message ChangePasswordResponse {
  bool success = 1;
  string message = 2;
}

// LLMキー更新用のリクエスト
message UpdateLLMKeyRequest {
  int32 llm_provider = 1; // 0:Gemini
  string key = 2;
}

// LLMキー更新用のレスポンス
message UpdateLLMKeyResponse {
  bool success = 1;
  string message = 2;
}

// ユーザー情報取得用のリクエスト
message GetUserInfoRequest {
  // 空のリクエスト（認証はヘッダーから）
}

// ユーザー情報取得用のレスポンス
message GetUserInfoResponse {
  string name = 1;
  string email = 2;
  // LLMキー情報（存在する場合）
  repeated LLMKeyInfo llm_keys = 3;
}

// LLMキー情報
message LLMKeyInfo {
  int32 llm_provider = 1; // 0:Gemini
  string key = 2;
}

// LLMキー削除用のリクエスト
message DeleteLLMKeyRequest {
  int32 llm_provider = 1; // 0:Gemini
}

// LLMキー削除用のレスポンス
message DeleteLLMKeyResponse {
  bool success = 1;
  string message = 2;
}

// アカウント削除用のリクエスト
message DeleteAccountRequest {
  // 空のリクエスト（認証はヘッダーから）
}

// アカウント削除用のレスポンス
message DeleteAccountResponse {
  bool success = 1;
  string message = 2;
}