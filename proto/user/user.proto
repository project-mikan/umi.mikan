syntax = "proto3";

package user;

option go_package = "github.com/project-mikan/umi.mikan/backend/infrastructure/grpc";

// UserService はユーザー設定とアカウント管理を提供するサービスです。
// ユーザー情報の更新、LLMキー管理、自動要約設定、Pub/Subメトリクス取得などの機能があります。
service UserService {
  // UpdateUserName はユーザー名を変更します。
  //
  // 例:
  //   request: { new_name: "新しい名前" }
  //   response: { success: true, message: "ユーザー名を更新しました" }
  //
  // エラー:
  //   - InvalidArgument: 名前が空
  //   - Internal: データベースエラー
  rpc UpdateUserName(UpdateUserNameRequest) returns (UpdateUserNameResponse);

  // ChangePassword は現在のパスワードを検証して新しいパスワードに変更します。
  //
  // 例:
  //   request: { current_password: "old123", new_password: "new456" }
  //   response: { success: true, message: "パスワードを変更しました" }
  //
  // エラー:
  //   - Unauthenticated: 現在のパスワードが不正
  //   - InvalidArgument: 新しいパスワードが短すぎる
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);

  // UpdateLLMKey はLLM APIキーを更新または新規作成します。
  // 現在はGemini (llm_provider=1) のみ対応しています。
  //
  // 例:
  //   request: { llm_provider: 1, key: "AIza..." }
  //   response: { success: true, message: "LLMキーを更新しました" }
  //
  // エラー:
  //   - InvalidArgument: プロバイダーまたはキーが不正
  rpc UpdateLLMKey(UpdateLLMKeyRequest) returns (UpdateLLMKeyResponse);

  // GetUserInfo はユーザーの基本情報とLLMキー設定を取得します。
  //
  // 例:
  //   request: {}
  //   response: { name: "太郎", email: "user@example.com", llm_keys: [{ llm_provider: 1, ... }] }
  //
  // エラー:
  //   - NotFound: ユーザーが存在しない（通常発生しない、認証済みのため）
  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);

  // DeleteLLMKey は指定されたLLM APIキーを削除します。
  //
  // 例:
  //   request: { llm_provider: 1 }
  //   response: { success: true, message: "LLMキーを削除しました" }
  //
  // エラー:
  //   - NotFound: 指定されたプロバイダーのキーが存在しない
  rpc DeleteLLMKey(DeleteLLMKeyRequest) returns (DeleteLLMKeyResponse);

  // DeleteAccount はユーザーアカウントと関連データを完全に削除します。
  // 日記、エンティティ、要約など全てのデータがカスケード削除されます。
  //
  // 例:
  //   request: {}
  //   response: { success: true, message: "アカウントを削除しました" }
  //
  // エラー:
  //   - Internal: 削除処理エラー
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse);

  // UpdateAutoSummarySettings は自動要約生成の設定を更新します。
  // 日次要約と月次要約をそれぞれ有効/無効にできます。
  //
  // 例:
  //   request: { llm_provider: 1, auto_summary_daily: true, auto_summary_monthly: false }
  //   response: { success: true, message: "自動要約設定を更新しました" }
  //
  // エラー:
  //   - NotFound: LLMキーが設定されていない
  rpc UpdateAutoSummarySettings(UpdateAutoSummarySettingsRequest) returns (UpdateAutoSummarySettingsResponse);

  // GetAutoSummarySettings は自動要約生成の現在の設定を取得します。
  //
  // 例:
  //   request: { llm_provider: 1 }
  //   response: { auto_summary_daily: true, auto_summary_monthly: false }
  //
  // エラー:
  //   - NotFound: LLMキーが設定されていない
  rpc GetAutoSummarySettings(GetAutoSummarySettingsRequest) returns (GetAutoSummarySettingsResponse);

  // GetPubSubMetrics はRedis Pub/Subによる要約生成タスクの処理状況を取得します。
  // 過去24時間の時間別メトリクス、現在処理中のタスク、統計情報が含まれます。
  //
  // 例:
  //   request: {}
  //   response: { hourly_metrics: [...], processing_tasks: [...], summary: { total_daily_summaries: 10, ... } }
  //
  // エラー: なし（データがない場合は空配列）
  rpc GetPubSubMetrics(GetPubSubMetricsRequest) returns (GetPubSubMetricsResponse);
}

// ユーザー名更新用のリクエスト
message UpdateUserNameRequest {
  string new_name = 1;
}

// ユーザー名更新用のレスポンス
message UpdateUserNameResponse {
  bool success = 1;
  string message = 2;
}

// パスワード変更用のリクエスト
message ChangePasswordRequest {
  string current_password = 1;
  string new_password = 2;
}

// パスワード変更用のレスポンス
message ChangePasswordResponse {
  bool success = 1;
  string message = 2;
}

// LLMキー更新用のリクエスト
message UpdateLLMKeyRequest {
  int32 llm_provider = 1; // 1:Gemini
  string key = 2;
}

// LLMキー更新用のレスポンス
message UpdateLLMKeyResponse {
  bool success = 1;
  string message = 2;
}

// ユーザー情報取得用のリクエスト
message GetUserInfoRequest {
  // 空のリクエスト（認証はヘッダーから）
}

// ユーザー情報取得用のレスポンス
message GetUserInfoResponse {
  string name = 1;
  string email = 2;
  // LLMキー情報（存在する場合）
  repeated LLMKeyInfo llm_keys = 3;
}

// LLMキー情報
message LLMKeyInfo {
  int32 llm_provider = 1; // 1:Gemini
  string key = 2;
  bool auto_summary_daily = 3; // 日毎の自動要約生成
  bool auto_summary_monthly = 4; // 月毎の自動要約生成
  bool auto_latest_trend_enabled = 5; // 直近トレンド分析の自動生成
}

// LLMキー削除用のリクエスト
message DeleteLLMKeyRequest {
  int32 llm_provider = 1; // 1:Gemini
}

// LLMキー削除用のレスポンス
message DeleteLLMKeyResponse {
  bool success = 1;
  string message = 2;
}

// アカウント削除用のリクエスト
message DeleteAccountRequest {
  // 空のリクエスト（認証はヘッダーから）
}

// アカウント削除用のレスポンス
message DeleteAccountResponse {
  bool success = 1;
  string message = 2;
}

// 自動要約設定更新用のリクエスト
message UpdateAutoSummarySettingsRequest {
  int32 llm_provider = 1; // 1:Gemini
  bool auto_summary_daily = 2; // 日毎の自動要約生成
  bool auto_summary_monthly = 3; // 月毎の自動要約生成
  bool auto_latest_trend_enabled = 4; // 直近トレンド分析の自動生成
}

// 自動要約設定更新用のレスポンス
message UpdateAutoSummarySettingsResponse {
  bool success = 1;
  string message = 2;
}

// 自動要約設定取得用のリクエスト
message GetAutoSummarySettingsRequest {
  int32 llm_provider = 1; // 1:Gemini
}

// 自動要約設定取得用のレスポンス
message GetAutoSummarySettingsResponse {
  bool auto_summary_daily = 1; // 日毎の自動要約生成
  bool auto_summary_monthly = 2; // 月毎の自動要約生成
  bool auto_latest_trend_enabled = 3; // 直近トレンド分析の自動生成
}

// Pub/Subメトリクス取得用のリクエスト
message GetPubSubMetricsRequest {
  // 空のリクエスト（認証はヘッダーから）
}

// Pub/Subメトリクス取得用のレスポンス
message GetPubSubMetricsResponse {
  // 過去24時間の処理状況
  repeated HourlyMetrics hourly_metrics = 1;
  // 処理中のタスク
  repeated ProcessingTask processing_tasks = 2;
  // 統計情報
  MetricsSummary summary = 3;
}

// 1時間ごとのメトリクス
message HourlyMetrics {
  int64 timestamp = 1; // 該当時間のUnixタイムスタンプ
  int32 daily_summaries_processed = 2; // 処理された日次要約数
  int32 monthly_summaries_processed = 3; // 処理された月次要約数
  int32 daily_summaries_failed = 4; // 失敗した日次要約数
  int32 monthly_summaries_failed = 5; // 失敗した月次要約数
  int32 latest_trends_processed = 6; // 処理されたトレンド分析数
  int32 latest_trends_failed = 7; // 失敗したトレンド分析数
}

// 処理中のタスク
message ProcessingTask {
  string task_type = 1; // タスク種別: "daily_summary" (日次要約), "monthly_summary" (月次要約), "latest_trend" (トレンド分析)
  string date = 2; // 日付: 日次はYYYY-MM-DD形式, 月次はYYYY-MM形式, トレンドは期間説明
  int64 started_at = 3; // タスク開始時刻 (Unixタイムスタンプ)
}

// メトリクス統計情報
message MetricsSummary {
  int32 total_daily_summaries = 1; // 総日次要約数
  int32 total_monthly_summaries = 2; // 総月次要約数
  int32 pending_daily_summaries = 3; // 未作成の日次要約数
  int32 pending_monthly_summaries = 4; // 未作成の月次要約数
  bool auto_summary_daily_enabled = 5; // 日次要約の自動生成が有効か
  bool auto_summary_monthly_enabled = 6; // 月次要約の自動生成が有効か
  bool auto_latest_trend_enabled = 7; // トレンド分析の自動生成が有効か
  string latest_trend_generated_at = 8; // 最後にトレンド分析が生成された日時 (ISO 8601形式)
}