syntax = "proto3";

package auth;

option go_package = "github.com/project-mikan/umi.mikan/backend/infrastructure/grpc";

// AuthService はユーザー認証と登録を管理するサービスです。
// JWT（Access Token + Refresh Token）ベースの認証を提供します。
service AuthService {
  // GetRegistrationConfig は新規登録に必要な設定情報を取得します。
  // REGISTER_KEY環境変数が設定されている場合、登録キーが必要かどうかを返します。
  //
  // 例:
  //   request: {}
  //   response: { register_key_required: true }
  //
  // エラー: なし（常に成功）
  rpc GetRegistrationConfig(GetRegistrationConfigRequest) returns (GetRegistrationConfigResponse);

  // RegisterByPassword はメールアドレスとパスワードで新規ユーザーを登録します。
  // REGISTER_KEYが設定されている場合は、正しい登録キーが必要です。
  //
  // 例:
  //   request: { email: "user@example.com", password: "pass123", name: "太郎", register_key: "secret" }
  //   response: { access_token: "...", refresh_token: "...", expires_in: 900 }
  //
  // エラー:
  //   - AlreadyExists: メールアドレスが既に登録されている
  //   - InvalidArgument: 登録キーが必須だが提供されていない
  //   - PermissionDenied: 登録キーが不正
  //   - InvalidArgument: バリデーションエラー（メール形式、パスワード長など）
  rpc RegisterByPassword(RegisterByPasswordRequest) returns (AuthResponse);

  // LoginByPassword はメールアドレスとパスワードでログインします。
  //
  // 例:
  //   request: { email: "user@example.com", password: "pass123" }
  //   response: { access_token: "...", refresh_token: "...", expires_in: 900 }
  //
  // エラー:
  //   - Unauthenticated: メールアドレスまたはパスワードが不正
  //   - NotFound: ユーザーが存在しない
  rpc LoginByPassword(LoginByPasswordRequest) returns (AuthResponse);

  // RefreshAccessToken はRefresh Tokenを使用してAccess Tokenを更新します。
  // Access Tokenの有効期限は15分、Refresh Tokenの有効期限は30日です。
  //
  // 例:
  //   request: { refresh_token: "..." }
  //   response: { access_token: "...", refresh_token: "...", expires_in: 900 }
  //
  // エラー:
  //   - Unauthenticated: Refresh Tokenが無効または期限切れ
  rpc RefreshAccessToken(RefreshAccessTokenRequest) returns (AuthResponse);
}

// 新規登録設定取得用のリクエスト
message GetRegistrationConfigRequest {
  // 空のリクエスト
}

// 新規登録設定取得用のレスポンス
message GetRegistrationConfigResponse {
  bool register_key_required = 1; // 登録キーが必要かどうか
}

// アクセストークン更新用のリクエスト
message RefreshAccessTokenRequest {
  string refresh_token = 1;
}

// パスワード新規登録用のリクエスト
message RegisterByPasswordRequest {
  string email = 1;
  string password = 2;
  string name = 3;
  string register_key = 4; // 新規登録キー（REGISTER_KEYが設定されている場合に必須）
}

// パスワードログイン用のリクエスト
message LoginByPasswordRequest {
  string email = 1;
  string password = 2;
}

// レスポンスはログイン方法に関わらず共通
message AuthResponse {
  string access_token = 1;
  string token_type = 2;
  int32 expires_in = 3; // 秒単位
  string refresh_token = 4;
}

