package database

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/google/uuid"
)

// Entity represents a row from 'public.entities'.
type Entity struct {
	ID         uuid.UUID `json:"id"`          // id
	Name       string    `json:"name"`        // name
	UserID     uuid.UUID `json:"user_id"`     // user_id
	CategoryID uuid.UUID `json:"category_id"` // category_id
	CreatedAt  int64     `json:"created_at"`  // created_at
	UpdatedAt  int64     `json:"updated_at"`  // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Entity] exists in the database.
func (e *Entity) Exists() bool {
	return e._exists
}

// Deleted returns true when the [Entity] has been marked for deletion
// from the database.
func (e *Entity) Deleted() bool {
	return e._deleted
}

// Insert inserts the [Entity] to the database.
func (e *Entity) Insert(ctx context.Context, db DB) error {
	switch {
	case e._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case e._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.entities (` +
		`id, name, user_id, category_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, e.ID, e.Name, e.UserID, e.CategoryID, e.CreatedAt, e.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID, e.Name, e.UserID, e.CategoryID, e.CreatedAt, e.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Update updates a [Entity] in the database.
func (e *Entity) Update(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case e._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.entities SET ` +
		`name = $1, user_id = $2, category_id = $3, created_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, e.Name, e.UserID, e.CategoryID, e.CreatedAt, e.UpdatedAt, e.ID)
	if _, err := db.ExecContext(ctx, sqlstr, e.Name, e.UserID, e.CategoryID, e.CreatedAt, e.UpdatedAt, e.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Entity] to the database.
func (e *Entity) Save(ctx context.Context, db DB) error {
	if e.Exists() {
		return e.Update(ctx, db)
	}
	return e.Insert(ctx, db)
}

// Upsert performs an upsert for [Entity].
func (e *Entity) Upsert(ctx context.Context, db DB) error {
	switch {
	case e._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.entities (` +
		`id, name, user_id, category_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, user_id = EXCLUDED.user_id, category_id = EXCLUDED.category_id, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, e.ID, e.Name, e.UserID, e.CategoryID, e.CreatedAt, e.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID, e.Name, e.UserID, e.CategoryID, e.CreatedAt, e.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Delete deletes the [Entity] from the database.
func (e *Entity) Delete(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return nil
	case e._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.entities ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, e.ID)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	e._deleted = true
	return nil
}

// EntityByID retrieves a row from 'public.entities' as a [Entity].
//
// Generated from index 'entities_pkey'.
func EntityByID(ctx context.Context, db DB, id uuid.UUID) (*Entity, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, user_id, category_id, created_at, updated_at ` +
		`FROM public.entities ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	e := Entity{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&e.ID, &e.Name, &e.UserID, &e.CategoryID, &e.CreatedAt, &e.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &e, nil
}

// EntityCategory returns the EntityCategory associated with the [Entity]'s (CategoryID).
//
// Generated from foreign key 'entities_category_id_fkey'.
func (e *Entity) EntityCategory(ctx context.Context, db DB) (*EntityCategory, error) {
	return EntityCategoryByID(ctx, db, e.CategoryID)
}

// User returns the User associated with the [Entity]'s (UserID).
//
// Generated from foreign key 'entities_user_id_fkey'.
func (e *Entity) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, e.UserID)
}
