package database

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/google/uuid"
)

// UserPasswordAuthe represents a row from 'public.user_password_authes'.
type UserPasswordAuthe struct {
	UserID         uuid.UUID `json:"user_id"`         // user_id
	PasswordHashed string    `json:"password_hashed"` // password_hashed
	CreatedAt      int64     `json:"created_at"`      // created_at
	UpdatedAt      int64     `json:"updated_at"`      // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [UserPasswordAuthe] exists in the database.
func (upa *UserPasswordAuthe) Exists() bool {
	return upa._exists
}

// Deleted returns true when the [UserPasswordAuthe] has been marked for deletion
// from the database.
func (upa *UserPasswordAuthe) Deleted() bool {
	return upa._deleted
}

// Insert inserts the [UserPasswordAuthe] to the database.
func (upa *UserPasswordAuthe) Insert(ctx context.Context, db DB) error {
	switch {
	case upa._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case upa._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.user_password_authes (` +
		`user_id, password_hashed, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, upa.UserID, upa.PasswordHashed, upa.CreatedAt, upa.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, upa.UserID, upa.PasswordHashed, upa.CreatedAt, upa.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	upa._exists = true
	return nil
}

// Update updates a [UserPasswordAuthe] in the database.
func (upa *UserPasswordAuthe) Update(ctx context.Context, db DB) error {
	switch {
	case !upa._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case upa._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.user_password_authes SET ` +
		`password_hashed = $1, created_at = $2, updated_at = $3 ` +
		`WHERE user_id = $4`
	// run
	logf(sqlstr, upa.PasswordHashed, upa.CreatedAt, upa.UpdatedAt, upa.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, upa.PasswordHashed, upa.CreatedAt, upa.UpdatedAt, upa.UserID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [UserPasswordAuthe] to the database.
func (upa *UserPasswordAuthe) Save(ctx context.Context, db DB) error {
	if upa.Exists() {
		return upa.Update(ctx, db)
	}
	return upa.Insert(ctx, db)
}

// Upsert performs an upsert for [UserPasswordAuthe].
func (upa *UserPasswordAuthe) Upsert(ctx context.Context, db DB) error {
	switch {
	case upa._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.user_password_authes (` +
		`user_id, password_hashed, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (user_id) DO ` +
		`UPDATE SET ` +
		`password_hashed = EXCLUDED.password_hashed, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, upa.UserID, upa.PasswordHashed, upa.CreatedAt, upa.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, upa.UserID, upa.PasswordHashed, upa.CreatedAt, upa.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	upa._exists = true
	return nil
}

// Delete deletes the [UserPasswordAuthe] from the database.
func (upa *UserPasswordAuthe) Delete(ctx context.Context, db DB) error {
	switch {
	case !upa._exists: // doesn't exist
		return nil
	case upa._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.user_password_authes ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, upa.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, upa.UserID); err != nil {
		return logerror(err)
	}
	// set deleted
	upa._deleted = true
	return nil
}

// UserPasswordAutheByUserID retrieves a row from 'public.user_password_authes' as a [UserPasswordAuthe].
//
// Generated from index 'user_password_authes_pkey'.
func UserPasswordAutheByUserID(ctx context.Context, db DB, userID uuid.UUID) (*UserPasswordAuthe, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, password_hashed, created_at, updated_at ` +
		`FROM public.user_password_authes ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	upa := UserPasswordAuthe{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID).Scan(&upa.UserID, &upa.PasswordHashed, &upa.CreatedAt, &upa.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &upa, nil
}

// User returns the User associated with the [UserPasswordAuthe]'s (UserID).
//
// Generated from foreign key 'user_password_authes_user_id_fkey'.
func (upa *UserPasswordAuthe) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, upa.UserID)
}
