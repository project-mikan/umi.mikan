package database

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/google/uuid"
)

// DiaryTrend represents a row from 'public.diary_trends'.
type DiaryTrend struct {
	ID            uuid.UUID `json:"id"`             // id
	UserID        uuid.UUID `json:"user_id"`        // user_id
	TrendType     string    `json:"trend_type"`     // trend_type
	ReferenceDate time.Time `json:"reference_date"` // reference_date
	Analysis      string    `json:"analysis"`       // analysis
	CreatedAt     int64     `json:"created_at"`     // created_at
	UpdatedAt     int64     `json:"updated_at"`     // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [DiaryTrend] exists in the database.
func (dt *DiaryTrend) Exists() bool {
	return dt._exists
}

// Deleted returns true when the [DiaryTrend] has been marked for deletion
// from the database.
func (dt *DiaryTrend) Deleted() bool {
	return dt._deleted
}

// Insert inserts the [DiaryTrend] to the database.
func (dt *DiaryTrend) Insert(ctx context.Context, db DB) error {
	switch {
	case dt._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dt._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.diary_trends (` +
		`id, user_id, trend_type, reference_date, analysis, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)`
	// run
	logf(sqlstr, dt.ID, dt.UserID, dt.TrendType, dt.ReferenceDate, dt.Analysis, dt.CreatedAt, dt.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dt.ID, dt.UserID, dt.TrendType, dt.ReferenceDate, dt.Analysis, dt.CreatedAt, dt.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dt._exists = true
	return nil
}

// Update updates a [DiaryTrend] in the database.
func (dt *DiaryTrend) Update(ctx context.Context, db DB) error {
	switch {
	case !dt._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dt._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.diary_trends SET ` +
		`user_id = $1, trend_type = $2, reference_date = $3, analysis = $4, created_at = $5, updated_at = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, dt.UserID, dt.TrendType, dt.ReferenceDate, dt.Analysis, dt.CreatedAt, dt.UpdatedAt, dt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dt.UserID, dt.TrendType, dt.ReferenceDate, dt.Analysis, dt.CreatedAt, dt.UpdatedAt, dt.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [DiaryTrend] to the database.
func (dt *DiaryTrend) Save(ctx context.Context, db DB) error {
	if dt.Exists() {
		return dt.Update(ctx, db)
	}
	return dt.Insert(ctx, db)
}

// Upsert performs an upsert for [DiaryTrend].
func (dt *DiaryTrend) Upsert(ctx context.Context, db DB) error {
	switch {
	case dt._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.diary_trends (` +
		`id, user_id, trend_type, reference_date, analysis, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, trend_type = EXCLUDED.trend_type, reference_date = EXCLUDED.reference_date, analysis = EXCLUDED.analysis, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dt.ID, dt.UserID, dt.TrendType, dt.ReferenceDate, dt.Analysis, dt.CreatedAt, dt.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dt.ID, dt.UserID, dt.TrendType, dt.ReferenceDate, dt.Analysis, dt.CreatedAt, dt.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dt._exists = true
	return nil
}

// Delete deletes the [DiaryTrend] from the database.
func (dt *DiaryTrend) Delete(ctx context.Context, db DB) error {
	switch {
	case !dt._exists: // doesn't exist
		return nil
	case dt._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.diary_trends ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, dt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dt.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dt._deleted = true
	return nil
}

// DiaryTrendByID retrieves a row from 'public.diary_trends' as a [DiaryTrend].
//
// Generated from index 'diary_trends_pkey'.
func DiaryTrendByID(ctx context.Context, db DB, id uuid.UUID) (*DiaryTrend, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, trend_type, reference_date, analysis, created_at, updated_at ` +
		`FROM public.diary_trends ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	dt := DiaryTrend{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dt.ID, &dt.UserID, &dt.TrendType, &dt.ReferenceDate, &dt.Analysis, &dt.CreatedAt, &dt.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dt, nil
}

// DiaryTrendsByUserIDTrendTypeReferenceDate retrieves a row from 'public.diary_trends' as a [DiaryTrend].
//
// Generated from index 'index_diary_trends_user_id_type_date'.
func DiaryTrendsByUserIDTrendTypeReferenceDate(ctx context.Context, db DB, userID uuid.UUID, trendType string, referenceDate time.Time) ([]*DiaryTrend, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, trend_type, reference_date, analysis, created_at, updated_at ` +
		`FROM public.diary_trends ` +
		`WHERE user_id = $1 AND trend_type = $2 AND reference_date = $3`
	// run
	logf(sqlstr, userID, trendType, referenceDate)
	rows, err := db.QueryContext(ctx, sqlstr, userID, trendType, referenceDate)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DiaryTrend
	for rows.Next() {
		dt := DiaryTrend{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dt.ID, &dt.UserID, &dt.TrendType, &dt.ReferenceDate, &dt.Analysis, &dt.CreatedAt, &dt.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dt)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DiaryTrendByUserIDTrendTypeReferenceDate retrieves a row from 'public.diary_trends' as a [DiaryTrend].
//
// Generated from index 'unique_user_trend'.
func DiaryTrendByUserIDTrendTypeReferenceDate(ctx context.Context, db DB, userID uuid.UUID, trendType string, referenceDate time.Time) (*DiaryTrend, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, trend_type, reference_date, analysis, created_at, updated_at ` +
		`FROM public.diary_trends ` +
		`WHERE user_id = $1 AND trend_type = $2 AND reference_date = $3`
	// run
	logf(sqlstr, userID, trendType, referenceDate)
	dt := DiaryTrend{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID, trendType, referenceDate).Scan(&dt.ID, &dt.UserID, &dt.TrendType, &dt.ReferenceDate, &dt.Analysis, &dt.CreatedAt, &dt.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dt, nil
}

// User returns the User associated with the [DiaryTrend]'s (UserID).
//
// Generated from foreign key 'diary_trends_user_id_fkey'.
func (dt *DiaryTrend) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, dt.UserID)
}
