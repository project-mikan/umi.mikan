package database

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

// DiarySummaryDay represents a row from 'public.diary_summary_days'.
type DiarySummaryDay struct {
	ID         uuid.UUID    `json:"id"`         // id
	UserID     uuid.UUID    `json:"user_id"`    // user_id
	DiaryID    uuid.UUID    `json:"diary_id"`   // diary_id
	Summary    string       `json:"summary"`    // summary
	Date       time.Time    `json:"date"`       // date
	Deprecated sql.NullBool `json:"deprecated"` // deprecated
	CreatedAt  int64        `json:"created_at"` // created_at
	UpdatedAt  int64        `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [DiarySummaryDay] exists in the database.
func (dsd *DiarySummaryDay) Exists() bool {
	return dsd._exists
}

// Deleted returns true when the [DiarySummaryDay] has been marked for deletion
// from the database.
func (dsd *DiarySummaryDay) Deleted() bool {
	return dsd._deleted
}

// Insert inserts the [DiarySummaryDay] to the database.
func (dsd *DiarySummaryDay) Insert(ctx context.Context, db DB) error {
	switch {
	case dsd._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dsd._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.diary_summary_days (` +
		`id, user_id, diary_id, summary, date, deprecated, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`
	// run
	logf(sqlstr, dsd.ID, dsd.UserID, dsd.DiaryID, dsd.Summary, dsd.Date, dsd.Deprecated, dsd.CreatedAt, dsd.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dsd.ID, dsd.UserID, dsd.DiaryID, dsd.Summary, dsd.Date, dsd.Deprecated, dsd.CreatedAt, dsd.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dsd._exists = true
	return nil
}

// Update updates a [DiarySummaryDay] in the database.
func (dsd *DiarySummaryDay) Update(ctx context.Context, db DB) error {
	switch {
	case !dsd._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dsd._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.diary_summary_days SET ` +
		`user_id = $1, diary_id = $2, summary = $3, date = $4, deprecated = $5, created_at = $6, updated_at = $7 ` +
		`WHERE id = $8`
	// run
	logf(sqlstr, dsd.UserID, dsd.DiaryID, dsd.Summary, dsd.Date, dsd.Deprecated, dsd.CreatedAt, dsd.UpdatedAt, dsd.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dsd.UserID, dsd.DiaryID, dsd.Summary, dsd.Date, dsd.Deprecated, dsd.CreatedAt, dsd.UpdatedAt, dsd.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [DiarySummaryDay] to the database.
func (dsd *DiarySummaryDay) Save(ctx context.Context, db DB) error {
	if dsd.Exists() {
		return dsd.Update(ctx, db)
	}
	return dsd.Insert(ctx, db)
}

// Upsert performs an upsert for [DiarySummaryDay].
func (dsd *DiarySummaryDay) Upsert(ctx context.Context, db DB) error {
	switch {
	case dsd._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.diary_summary_days (` +
		`id, user_id, diary_id, summary, date, deprecated, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, diary_id = EXCLUDED.diary_id, summary = EXCLUDED.summary, date = EXCLUDED.date, deprecated = EXCLUDED.deprecated, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dsd.ID, dsd.UserID, dsd.DiaryID, dsd.Summary, dsd.Date, dsd.Deprecated, dsd.CreatedAt, dsd.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dsd.ID, dsd.UserID, dsd.DiaryID, dsd.Summary, dsd.Date, dsd.Deprecated, dsd.CreatedAt, dsd.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dsd._exists = true
	return nil
}

// Delete deletes the [DiarySummaryDay] from the database.
func (dsd *DiarySummaryDay) Delete(ctx context.Context, db DB) error {
	switch {
	case !dsd._exists: // doesn't exist
		return nil
	case dsd._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.diary_summary_days ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, dsd.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dsd.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dsd._deleted = true
	return nil
}

// DiarySummaryDayByID retrieves a row from 'public.diary_summary_days' as a [DiarySummaryDay].
//
// Generated from index 'diary_summary_days_pkey'.
func DiarySummaryDayByID(ctx context.Context, db DB, id uuid.UUID) (*DiarySummaryDay, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, diary_id, summary, date, deprecated, created_at, updated_at ` +
		`FROM public.diary_summary_days ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	dsd := DiarySummaryDay{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dsd.ID, &dsd.UserID, &dsd.DiaryID, &dsd.Summary, &dsd.Date, &dsd.Deprecated, &dsd.CreatedAt, &dsd.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dsd, nil
}

// DiarySummaryDaysByDeprecated retrieves a row from 'public.diary_summary_days' as a [DiarySummaryDay].
//
// Generated from index 'index_diary_summary_days_deprecated'.
func DiarySummaryDaysByDeprecated(ctx context.Context, db DB, deprecated sql.NullBool) ([]*DiarySummaryDay, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, diary_id, summary, date, deprecated, created_at, updated_at ` +
		`FROM public.diary_summary_days ` +
		`WHERE deprecated = $1`
	// run
	logf(sqlstr, deprecated)
	rows, err := db.QueryContext(ctx, sqlstr, deprecated)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DiarySummaryDay
	for rows.Next() {
		dsd := DiarySummaryDay{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsd.ID, &dsd.UserID, &dsd.DiaryID, &dsd.Summary, &dsd.Date, &dsd.Deprecated, &dsd.CreatedAt, &dsd.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsd)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DiarySummaryDaysByUserIDDate retrieves a row from 'public.diary_summary_days' as a [DiarySummaryDay].
//
// Generated from index 'index_diary_summary_days_user_id_date'.
func DiarySummaryDaysByUserIDDate(ctx context.Context, db DB, userID uuid.UUID, date time.Time) ([]*DiarySummaryDay, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, diary_id, summary, date, deprecated, created_at, updated_at ` +
		`FROM public.diary_summary_days ` +
		`WHERE user_id = $1 AND date = $2`
	// run
	logf(sqlstr, userID, date)
	rows, err := db.QueryContext(ctx, sqlstr, userID, date)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DiarySummaryDay
	for rows.Next() {
		dsd := DiarySummaryDay{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsd.ID, &dsd.UserID, &dsd.DiaryID, &dsd.Summary, &dsd.Date, &dsd.Deprecated, &dsd.CreatedAt, &dsd.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsd)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DiarySummaryDayByUserIDDate retrieves a row from 'public.diary_summary_days' as a [DiarySummaryDay].
//
// Generated from index 'unique_user_date_summary'.
func DiarySummaryDayByUserIDDate(ctx context.Context, db DB, userID uuid.UUID, date time.Time) (*DiarySummaryDay, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, diary_id, summary, date, deprecated, created_at, updated_at ` +
		`FROM public.diary_summary_days ` +
		`WHERE user_id = $1 AND date = $2`
	// run
	logf(sqlstr, userID, date)
	dsd := DiarySummaryDay{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID, date).Scan(&dsd.ID, &dsd.UserID, &dsd.DiaryID, &dsd.Summary, &dsd.Date, &dsd.Deprecated, &dsd.CreatedAt, &dsd.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dsd, nil
}

// Diary returns the Diary associated with the [DiarySummaryDay]'s (DiaryID).
//
// Generated from foreign key 'diary_summary_days_diary_id_fkey'.
func (dsd *DiarySummaryDay) Diary(ctx context.Context, db DB) (*Diary, error) {
	return DiaryByID(ctx, db, dsd.DiaryID)
}

// User returns the User associated with the [DiarySummaryDay]'s (UserID).
//
// Generated from foreign key 'diary_summary_days_user_id_fkey'.
func (dsd *DiarySummaryDay) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, dsd.UserID)
}
