package database

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/google/uuid"
)

// Diary represents a row from 'public.diaries'.
type Diary struct {
	ID        uuid.UUID `json:"id"`         // id
	UserID    uuid.UUID `json:"user_id"`    // user_id
	Content   string    `json:"content"`    // content
	Date      time.Time `json:"date"`       // date
	CreatedAt int64     `json:"created_at"` // created_at
	UpdatedAt int64     `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Diary] exists in the database.
func (d *Diary) Exists() bool {
	return d._exists
}

// Deleted returns true when the [Diary] has been marked for deletion
// from the database.
func (d *Diary) Deleted() bool {
	return d._deleted
}

// Insert inserts the [Diary] to the database.
func (d *Diary) Insert(ctx context.Context, db DB) error {
	switch {
	case d._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case d._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.diaries (` +
		`id, user_id, content, date, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, d.ID, d.UserID, d.Content, d.Date, d.CreatedAt, d.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, d.ID, d.UserID, d.Content, d.Date, d.CreatedAt, d.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	d._exists = true
	return nil
}

// Update updates a [Diary] in the database.
func (d *Diary) Update(ctx context.Context, db DB) error {
	switch {
	case !d._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case d._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.diaries SET ` +
		`user_id = $1, content = $2, date = $3, created_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, d.UserID, d.Content, d.Date, d.CreatedAt, d.UpdatedAt, d.ID)
	if _, err := db.ExecContext(ctx, sqlstr, d.UserID, d.Content, d.Date, d.CreatedAt, d.UpdatedAt, d.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Diary] to the database.
func (d *Diary) Save(ctx context.Context, db DB) error {
	if d.Exists() {
		return d.Update(ctx, db)
	}
	return d.Insert(ctx, db)
}

// Upsert performs an upsert for [Diary].
func (d *Diary) Upsert(ctx context.Context, db DB) error {
	switch {
	case d._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.diaries (` +
		`id, user_id, content, date, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, content = EXCLUDED.content, date = EXCLUDED.date, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, d.ID, d.UserID, d.Content, d.Date, d.CreatedAt, d.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, d.ID, d.UserID, d.Content, d.Date, d.CreatedAt, d.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	d._exists = true
	return nil
}

// Delete deletes the [Diary] from the database.
func (d *Diary) Delete(ctx context.Context, db DB) error {
	switch {
	case !d._exists: // doesn't exist
		return nil
	case d._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.diaries ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, d.ID)
	if _, err := db.ExecContext(ctx, sqlstr, d.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	d._deleted = true
	return nil
}

// DiaryByID retrieves a row from 'public.diaries' as a [Diary].
//
// Generated from index 'diaries_pkey'.
func DiaryByID(ctx context.Context, db DB, id uuid.UUID) (*Diary, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, content, date, created_at, updated_at ` +
		`FROM public.diaries ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	d := Diary{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&d.ID, &d.UserID, &d.Content, &d.Date, &d.CreatedAt, &d.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &d, nil
}

// DiariesByUserIDDate retrieves a row from 'public.diaries' as a [Diary].
//
// Generated from index 'index_diaries_user_id_and_date'.
func DiariesByUserIDDate(ctx context.Context, db DB, userID uuid.UUID, date time.Time) ([]*Diary, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, content, date, created_at, updated_at ` +
		`FROM public.diaries ` +
		`WHERE user_id = $1 AND date = $2`
	// run
	logf(sqlstr, userID, date)
	rows, err := db.QueryContext(ctx, sqlstr, userID, date)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Diary
	for rows.Next() {
		d := Diary{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&d.ID, &d.UserID, &d.Content, &d.Date, &d.CreatedAt, &d.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &d)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DiaryByUserIDDate retrieves a row from 'public.diaries' as a [Diary].
//
// Generated from index 'unique_user_date'.
func DiaryByUserIDDate(ctx context.Context, db DB, userID uuid.UUID, date time.Time) (*Diary, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, content, date, created_at, updated_at ` +
		`FROM public.diaries ` +
		`WHERE user_id = $1 AND date = $2`
	// run
	logf(sqlstr, userID, date)
	d := Diary{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID, date).Scan(&d.ID, &d.UserID, &d.Content, &d.Date, &d.CreatedAt, &d.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &d, nil
}

// User returns the User associated with the [Diary]'s (UserID).
//
// Generated from foreign key 'diaries_user_id_fkey'.
func (d *Diary) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, d.UserID)
}
