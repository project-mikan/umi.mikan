package database

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/google/uuid"
)

// DiarySummaryMonth represents a row from 'public.diary_summary_months'.
type DiarySummaryMonth struct {
	ID        uuid.UUID `json:"id"`         // id
	UserID    uuid.UUID `json:"user_id"`    // user_id
	Year      int       `json:"year"`       // year
	Month     int       `json:"month"`      // month
	Summary   string    `json:"summary"`    // summary
	CreatedAt int64     `json:"created_at"` // created_at
	UpdatedAt int64     `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [DiarySummaryMonth] exists in the database.
func (dsm *DiarySummaryMonth) Exists() bool {
	return dsm._exists
}

// Deleted returns true when the [DiarySummaryMonth] has been marked for deletion
// from the database.
func (dsm *DiarySummaryMonth) Deleted() bool {
	return dsm._deleted
}

// Insert inserts the [DiarySummaryMonth] to the database.
func (dsm *DiarySummaryMonth) Insert(ctx context.Context, db DB) error {
	switch {
	case dsm._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dsm._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.diary_summary_months (` +
		`id, user_id, year, month, summary, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)`
	// run
	logf(sqlstr, dsm.ID, dsm.UserID, dsm.Year, dsm.Month, dsm.Summary, dsm.CreatedAt, dsm.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dsm.ID, dsm.UserID, dsm.Year, dsm.Month, dsm.Summary, dsm.CreatedAt, dsm.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dsm._exists = true
	return nil
}

// Update updates a [DiarySummaryMonth] in the database.
func (dsm *DiarySummaryMonth) Update(ctx context.Context, db DB) error {
	switch {
	case !dsm._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dsm._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.diary_summary_months SET ` +
		`user_id = $1, year = $2, month = $3, summary = $4, created_at = $5, updated_at = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, dsm.UserID, dsm.Year, dsm.Month, dsm.Summary, dsm.CreatedAt, dsm.UpdatedAt, dsm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dsm.UserID, dsm.Year, dsm.Month, dsm.Summary, dsm.CreatedAt, dsm.UpdatedAt, dsm.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [DiarySummaryMonth] to the database.
func (dsm *DiarySummaryMonth) Save(ctx context.Context, db DB) error {
	if dsm.Exists() {
		return dsm.Update(ctx, db)
	}
	return dsm.Insert(ctx, db)
}

// Upsert performs an upsert for [DiarySummaryMonth].
func (dsm *DiarySummaryMonth) Upsert(ctx context.Context, db DB) error {
	switch {
	case dsm._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.diary_summary_months (` +
		`id, user_id, year, month, summary, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, year = EXCLUDED.year, month = EXCLUDED.month, summary = EXCLUDED.summary, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dsm.ID, dsm.UserID, dsm.Year, dsm.Month, dsm.Summary, dsm.CreatedAt, dsm.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dsm.ID, dsm.UserID, dsm.Year, dsm.Month, dsm.Summary, dsm.CreatedAt, dsm.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dsm._exists = true
	return nil
}

// Delete deletes the [DiarySummaryMonth] from the database.
func (dsm *DiarySummaryMonth) Delete(ctx context.Context, db DB) error {
	switch {
	case !dsm._exists: // doesn't exist
		return nil
	case dsm._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.diary_summary_months ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, dsm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dsm.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dsm._deleted = true
	return nil
}

// DiarySummaryMonthByID retrieves a row from 'public.diary_summary_months' as a [DiarySummaryMonth].
//
// Generated from index 'diary_summary_months_pkey'.
func DiarySummaryMonthByID(ctx context.Context, db DB, id uuid.UUID) (*DiarySummaryMonth, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, year, month, summary, created_at, updated_at ` +
		`FROM public.diary_summary_months ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	dsm := DiarySummaryMonth{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dsm.ID, &dsm.UserID, &dsm.Year, &dsm.Month, &dsm.Summary, &dsm.CreatedAt, &dsm.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dsm, nil
}

// DiarySummaryMonthsByUserIDYearMonth retrieves a row from 'public.diary_summary_months' as a [DiarySummaryMonth].
//
// Generated from index 'index_diary_summary_months_user_id_year_month'.
func DiarySummaryMonthsByUserIDYearMonth(ctx context.Context, db DB, userID uuid.UUID, year, month int) ([]*DiarySummaryMonth, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, year, month, summary, created_at, updated_at ` +
		`FROM public.diary_summary_months ` +
		`WHERE user_id = $1 AND year = $2 AND month = $3`
	// run
	logf(sqlstr, userID, year, month)
	rows, err := db.QueryContext(ctx, sqlstr, userID, year, month)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DiarySummaryMonth
	for rows.Next() {
		dsm := DiarySummaryMonth{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dsm.ID, &dsm.UserID, &dsm.Year, &dsm.Month, &dsm.Summary, &dsm.CreatedAt, &dsm.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dsm)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DiarySummaryMonthByUserIDYearMonth retrieves a row from 'public.diary_summary_months' as a [DiarySummaryMonth].
//
// Generated from index 'unique_user_month'.
func DiarySummaryMonthByUserIDYearMonth(ctx context.Context, db DB, userID uuid.UUID, year, month int) (*DiarySummaryMonth, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, year, month, summary, created_at, updated_at ` +
		`FROM public.diary_summary_months ` +
		`WHERE user_id = $1 AND year = $2 AND month = $3`
	// run
	logf(sqlstr, userID, year, month)
	dsm := DiarySummaryMonth{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID, year, month).Scan(&dsm.ID, &dsm.UserID, &dsm.Year, &dsm.Month, &dsm.Summary, &dsm.CreatedAt, &dsm.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dsm, nil
}

// User returns the User associated with the [DiarySummaryMonth]'s (UserID).
//
// Generated from foreign key 'diary_summary_months_user_id_fkey'.
func (dsm *DiarySummaryMonth) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, dsm.UserID)
}
