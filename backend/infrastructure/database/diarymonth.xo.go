package database

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/google/uuid"
)

// DiaryMonth represents a row from 'public.diary_months'.
type DiaryMonth struct {
	ID        uuid.UUID `json:"id"`         // id
	UserID    uuid.UUID `json:"user_id"`    // user_id
	Content   string    `json:"content"`    // content
	Date      time.Time `json:"date"`       // date
	CreatedAt int64     `json:"created_at"` // created_at
	UpdatedAt int64     `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [DiaryMonth] exists in the database.
func (dm *DiaryMonth) Exists() bool {
	return dm._exists
}

// Deleted returns true when the [DiaryMonth] has been marked for deletion
// from the database.
func (dm *DiaryMonth) Deleted() bool {
	return dm._deleted
}

// Insert inserts the [DiaryMonth] to the database.
func (dm *DiaryMonth) Insert(ctx context.Context, db DB) error {
	switch {
	case dm._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dm._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.diary_months (` +
		`id, user_id, content, date, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, dm.ID, dm.UserID, dm.Content, dm.Date, dm.CreatedAt, dm.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dm.ID, dm.UserID, dm.Content, dm.Date, dm.CreatedAt, dm.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dm._exists = true
	return nil
}

// Update updates a [DiaryMonth] in the database.
func (dm *DiaryMonth) Update(ctx context.Context, db DB) error {
	switch {
	case !dm._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dm._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.diary_months SET ` +
		`user_id = $1, content = $2, date = $3, created_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, dm.UserID, dm.Content, dm.Date, dm.CreatedAt, dm.UpdatedAt, dm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dm.UserID, dm.Content, dm.Date, dm.CreatedAt, dm.UpdatedAt, dm.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [DiaryMonth] to the database.
func (dm *DiaryMonth) Save(ctx context.Context, db DB) error {
	if dm.Exists() {
		return dm.Update(ctx, db)
	}
	return dm.Insert(ctx, db)
}

// Upsert performs an upsert for [DiaryMonth].
func (dm *DiaryMonth) Upsert(ctx context.Context, db DB) error {
	switch {
	case dm._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.diary_months (` +
		`id, user_id, content, date, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, content = EXCLUDED.content, date = EXCLUDED.date, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, dm.ID, dm.UserID, dm.Content, dm.Date, dm.CreatedAt, dm.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, dm.ID, dm.UserID, dm.Content, dm.Date, dm.CreatedAt, dm.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	dm._exists = true
	return nil
}

// Delete deletes the [DiaryMonth] from the database.
func (dm *DiaryMonth) Delete(ctx context.Context, db DB) error {
	switch {
	case !dm._exists: // doesn't exist
		return nil
	case dm._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.diary_months ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, dm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dm.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dm._deleted = true
	return nil
}

// DiaryMonthByID retrieves a row from 'public.diary_months' as a [DiaryMonth].
//
// Generated from index 'diary_months_pkey'.
func DiaryMonthByID(ctx context.Context, db DB, id uuid.UUID) (*DiaryMonth, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, content, date, created_at, updated_at ` +
		`FROM public.diary_months ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	dm := DiaryMonth{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dm.ID, &dm.UserID, &dm.Content, &dm.Date, &dm.CreatedAt, &dm.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dm, nil
}

// DiaryMonthsByUserIDDate retrieves a row from 'public.diary_months' as a [DiaryMonth].
//
// Generated from index 'index_diary_months_user_id_and_date'.
func DiaryMonthsByUserIDDate(ctx context.Context, db DB, userID uuid.UUID, date time.Time) ([]*DiaryMonth, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, content, date, created_at, updated_at ` +
		`FROM public.diary_months ` +
		`WHERE user_id = $1 AND date = $2`
	// run
	logf(sqlstr, userID, date)
	rows, err := db.QueryContext(ctx, sqlstr, userID, date)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DiaryMonth
	for rows.Next() {
		dm := DiaryMonth{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&dm.ID, &dm.UserID, &dm.Content, &dm.Date, &dm.CreatedAt, &dm.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &dm)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DiaryMonthByUserIDDate retrieves a row from 'public.diary_months' as a [DiaryMonth].
//
// Generated from index 'unique_user_date_months'.
func DiaryMonthByUserIDDate(ctx context.Context, db DB, userID uuid.UUID, date time.Time) (*DiaryMonth, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, content, date, created_at, updated_at ` +
		`FROM public.diary_months ` +
		`WHERE user_id = $1 AND date = $2`
	// run
	logf(sqlstr, userID, date)
	dm := DiaryMonth{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID, date).Scan(&dm.ID, &dm.UserID, &dm.Content, &dm.Date, &dm.CreatedAt, &dm.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &dm, nil
}

// User returns the User associated with the [DiaryMonth]'s (UserID).
//
// Generated from foreign key 'diary_months_user_id_fkey'.
func (dm *DiaryMonth) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, dm.UserID)
}
