package database

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/google/uuid"
)

// EntityAlias represents a row from 'public.entity_aliases'.
type EntityAlias struct {
	ID        uuid.UUID `json:"id"`         // id
	EntityID  uuid.UUID `json:"entity_id"`  // entity_id
	Name      string    `json:"name"`       // name
	CreatedAt int64     `json:"created_at"` // created_at
	UpdatedAt int64     `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [EntityAlias] exists in the database.
func (ea *EntityAlias) Exists() bool {
	return ea._exists
}

// Deleted returns true when the [EntityAlias] has been marked for deletion
// from the database.
func (ea *EntityAlias) Deleted() bool {
	return ea._deleted
}

// Insert inserts the [EntityAlias] to the database.
func (ea *EntityAlias) Insert(ctx context.Context, db DB) error {
	switch {
	case ea._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ea._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.entity_aliases (` +
		`id, entity_id, name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`
	// run
	logf(sqlstr, ea.ID, ea.EntityID, ea.Name, ea.CreatedAt, ea.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, ea.ID, ea.EntityID, ea.Name, ea.CreatedAt, ea.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	ea._exists = true
	return nil
}

// Update updates a [EntityAlias] in the database.
func (ea *EntityAlias) Update(ctx context.Context, db DB) error {
	switch {
	case !ea._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ea._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.entity_aliases SET ` +
		`entity_id = $1, name = $2, created_at = $3, updated_at = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, ea.EntityID, ea.Name, ea.CreatedAt, ea.UpdatedAt, ea.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ea.EntityID, ea.Name, ea.CreatedAt, ea.UpdatedAt, ea.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [EntityAlias] to the database.
func (ea *EntityAlias) Save(ctx context.Context, db DB) error {
	if ea.Exists() {
		return ea.Update(ctx, db)
	}
	return ea.Insert(ctx, db)
}

// Upsert performs an upsert for [EntityAlias].
func (ea *EntityAlias) Upsert(ctx context.Context, db DB) error {
	switch {
	case ea._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.entity_aliases (` +
		`id, entity_id, name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`entity_id = EXCLUDED.entity_id, name = EXCLUDED.name, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, ea.ID, ea.EntityID, ea.Name, ea.CreatedAt, ea.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, ea.ID, ea.EntityID, ea.Name, ea.CreatedAt, ea.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	ea._exists = true
	return nil
}

// Delete deletes the [EntityAlias] from the database.
func (ea *EntityAlias) Delete(ctx context.Context, db DB) error {
	switch {
	case !ea._exists: // doesn't exist
		return nil
	case ea._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.entity_aliases ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ea.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ea.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ea._deleted = true
	return nil
}

// EntityAliasByID retrieves a row from 'public.entity_aliases' as a [EntityAlias].
//
// Generated from index 'entity_aliases_pkey'.
func EntityAliasByID(ctx context.Context, db DB, id uuid.UUID) (*EntityAlias, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, entity_id, name, created_at, updated_at ` +
		`FROM public.entity_aliases ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ea := EntityAlias{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ea.ID, &ea.EntityID, &ea.Name, &ea.CreatedAt, &ea.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &ea, nil
}

// Entity returns the Entity associated with the [EntityAlias]'s (EntityID).
//
// Generated from foreign key 'entity_aliases_entity_id_fkey'.
func (ea *EntityAlias) Entity(ctx context.Context, db DB) (*Entity, error) {
	return EntityByID(ctx, db, ea.EntityID)
}
