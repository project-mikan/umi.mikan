// Package database contains generated code for schema 'public'.
package database

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/google/uuid"
)

// DailySummary represents a row from 'public.daily_summaries'.
type DailySummary struct {
	ID        uuid.UUID `json:"id"`         // id
	DiaryID   uuid.UUID `json:"diary_id"`   // diary_id
	Summary   string    `json:"summary"`    // summary
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [DailySummary] exists in the database.
func (ds *DailySummary) Exists() bool {
	return ds._exists
}

// Deleted returns true when the [DailySummary] has been marked for deletion
// from the database.
func (ds *DailySummary) Deleted() bool {
	return ds._deleted
}

// Insert inserts the [DailySummary] to the database.
func (ds *DailySummary) Insert(ctx context.Context, db DB) error {
	switch {
	case ds._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ds._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.daily_summaries (` +
		`id, diary_id, summary, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`
	// run
	logf(sqlstr, ds.ID, ds.DiaryID, ds.Summary, ds.CreatedAt, ds.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, ds.ID, ds.DiaryID, ds.Summary, ds.CreatedAt, ds.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	ds._exists = true
	return nil
}

// Update updates a [DailySummary] in the database.
func (ds *DailySummary) Update(ctx context.Context, db DB) error {
	switch {
	case !ds._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ds._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.daily_summaries SET ` +
		`diary_id = $1, summary = $2, created_at = $3, updated_at = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, ds.DiaryID, ds.Summary, ds.CreatedAt, ds.UpdatedAt, ds.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ds.DiaryID, ds.Summary, ds.CreatedAt, ds.UpdatedAt, ds.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [DailySummary] to the database.
func (ds *DailySummary) Save(ctx context.Context, db DB) error {
	if ds.Exists() {
		return ds.Update(ctx, db)
	}
	return ds.Insert(ctx, db)
}

// Upsert performs an upsert for [DailySummary].
func (ds *DailySummary) Upsert(ctx context.Context, db DB) error {
	switch {
	case ds._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.daily_summaries (` +
		`id, diary_id, summary, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`diary_id = EXCLUDED.diary_id, summary = EXCLUDED.summary, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, ds.ID, ds.DiaryID, ds.Summary, ds.CreatedAt, ds.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, ds.ID, ds.DiaryID, ds.Summary, ds.CreatedAt, ds.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	ds._exists = true
	return nil
}

// Delete deletes the [DailySummary] from the database.
func (ds *DailySummary) Delete(ctx context.Context, db DB) error {
	switch {
	case !ds._exists: // doesn't exist
		return nil
	case ds._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.daily_summaries ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ds.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ds.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ds._deleted = true
	return nil
}

// DailySummaryByDiaryID retrieves a row from 'public.daily_summaries' as a [DailySummary].
//
// Generated from index 'daily_summaries_diary_id_key'.
func DailySummaryByDiaryID(ctx context.Context, db DB, diaryID uuid.UUID) (*DailySummary, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, diary_id, summary, created_at, updated_at ` +
		`FROM public.daily_summaries ` +
		`WHERE diary_id = $1`
	// run
	logf(sqlstr, diaryID)
	ds := DailySummary{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, diaryID).Scan(&ds.ID, &ds.DiaryID, &ds.Summary, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &ds, nil
}

// DailySummaryByID retrieves a row from 'public.daily_summaries' as a [DailySummary].
//
// Generated from index 'daily_summaries_pkey'.
func DailySummaryByID(ctx context.Context, db DB, id uuid.UUID) (*DailySummary, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, diary_id, summary, created_at, updated_at ` +
		`FROM public.daily_summaries ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ds := DailySummary{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ds.ID, &ds.DiaryID, &ds.Summary, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &ds, nil
}

// DailySummariesByCreatedAt retrieves a row from 'public.daily_summaries' as a [DailySummary].
//
// Generated from index 'idx_daily_summaries_created_at'.
func DailySummariesByCreatedAt(ctx context.Context, db DB, createdAt time.Time) ([]*DailySummary, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, diary_id, summary, created_at, updated_at ` +
		`FROM public.daily_summaries ` +
		`WHERE created_at = $1`
	// run
	logf(sqlstr, createdAt)
	rows, err := db.QueryContext(ctx, sqlstr, createdAt)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DailySummary
	for rows.Next() {
		ds := DailySummary{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ds.ID, &ds.DiaryID, &ds.Summary, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ds)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// DailySummariesByDiaryID retrieves a row from 'public.daily_summaries' as a [DailySummary].
//
// Generated from index 'idx_daily_summaries_diary_id'.
func DailySummariesByDiaryID(ctx context.Context, db DB, diaryID uuid.UUID) ([]*DailySummary, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, diary_id, summary, created_at, updated_at ` +
		`FROM public.daily_summaries ` +
		`WHERE diary_id = $1`
	// run
	logf(sqlstr, diaryID)
	rows, err := db.QueryContext(ctx, sqlstr, diaryID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*DailySummary
	for rows.Next() {
		ds := DailySummary{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ds.ID, &ds.DiaryID, &ds.Summary, &ds.CreatedAt, &ds.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ds)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Diary returns the Diary associated with the [DailySummary]'s (DiaryID).
//
// Generated from foreign key 'daily_summaries_diary_id_fkey'.
func (ds *DailySummary) Diary(ctx context.Context, db DB) (*Diary, error) {
	return DiaryByID(ctx, db, ds.DiaryID)
}
