// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/diary/diary.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DiaryService_CreateDiaryEntry_FullMethodName   = "/diary.DiaryService/CreateDiaryEntry"
	DiaryService_GetDiaryEntry_FullMethodName      = "/diary.DiaryService/GetDiaryEntry"
	DiaryService_ListDiaryEntries_FullMethodName   = "/diary.DiaryService/ListDiaryEntries"
	DiaryService_SearchDiaryEntries_FullMethodName = "/diary.DiaryService/SearchDiaryEntries"
	DiaryService_UpdateDiaryEntry_FullMethodName   = "/diary.DiaryService/UpdateDiaryEntry"
	DiaryService_DeleteDiaryEntry_FullMethodName   = "/diary.DiaryService/DeleteDiaryEntry"
)

// DiaryServiceClient is the client API for DiaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiaryServiceClient interface {
	CreateDiaryEntry(ctx context.Context, in *CreateDiaryEntryRequest, opts ...grpc.CallOption) (*CreateDiaryEntryResponse, error)
	GetDiaryEntry(ctx context.Context, in *GetDiaryEntryRequest, opts ...grpc.CallOption) (*GetDiaryEntryResponse, error)
	ListDiaryEntries(ctx context.Context, in *ListDiaryEntriesRequest, opts ...grpc.CallOption) (*ListDiaryEntriesResponse, error)
	SearchDiaryEntries(ctx context.Context, in *SearchDiaryEntriesRequest, opts ...grpc.CallOption) (*SearchDiaryEntriesResponse, error)
	UpdateDiaryEntry(ctx context.Context, in *UpdateDiaryEntryRequest, opts ...grpc.CallOption) (*UpdateDiaryEntryResponse, error)
	DeleteDiaryEntry(ctx context.Context, in *DeleteDiaryEntryRequest, opts ...grpc.CallOption) (*DeleteDiaryEntryResponse, error)
}

type diaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiaryServiceClient(cc grpc.ClientConnInterface) DiaryServiceClient {
	return &diaryServiceClient{cc}
}

func (c *diaryServiceClient) CreateDiaryEntry(ctx context.Context, in *CreateDiaryEntryRequest, opts ...grpc.CallOption) (*CreateDiaryEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDiaryEntryResponse)
	err := c.cc.Invoke(ctx, DiaryService_CreateDiaryEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) GetDiaryEntry(ctx context.Context, in *GetDiaryEntryRequest, opts ...grpc.CallOption) (*GetDiaryEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiaryEntryResponse)
	err := c.cc.Invoke(ctx, DiaryService_GetDiaryEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) ListDiaryEntries(ctx context.Context, in *ListDiaryEntriesRequest, opts ...grpc.CallOption) (*ListDiaryEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDiaryEntriesResponse)
	err := c.cc.Invoke(ctx, DiaryService_ListDiaryEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) SearchDiaryEntries(ctx context.Context, in *SearchDiaryEntriesRequest, opts ...grpc.CallOption) (*SearchDiaryEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDiaryEntriesResponse)
	err := c.cc.Invoke(ctx, DiaryService_SearchDiaryEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) UpdateDiaryEntry(ctx context.Context, in *UpdateDiaryEntryRequest, opts ...grpc.CallOption) (*UpdateDiaryEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDiaryEntryResponse)
	err := c.cc.Invoke(ctx, DiaryService_UpdateDiaryEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) DeleteDiaryEntry(ctx context.Context, in *DeleteDiaryEntryRequest, opts ...grpc.CallOption) (*DeleteDiaryEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDiaryEntryResponse)
	err := c.cc.Invoke(ctx, DiaryService_DeleteDiaryEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiaryServiceServer is the server API for DiaryService service.
// All implementations must embed UnimplementedDiaryServiceServer
// for forward compatibility.
type DiaryServiceServer interface {
	CreateDiaryEntry(context.Context, *CreateDiaryEntryRequest) (*CreateDiaryEntryResponse, error)
	GetDiaryEntry(context.Context, *GetDiaryEntryRequest) (*GetDiaryEntryResponse, error)
	ListDiaryEntries(context.Context, *ListDiaryEntriesRequest) (*ListDiaryEntriesResponse, error)
	SearchDiaryEntries(context.Context, *SearchDiaryEntriesRequest) (*SearchDiaryEntriesResponse, error)
	UpdateDiaryEntry(context.Context, *UpdateDiaryEntryRequest) (*UpdateDiaryEntryResponse, error)
	DeleteDiaryEntry(context.Context, *DeleteDiaryEntryRequest) (*DeleteDiaryEntryResponse, error)
	mustEmbedUnimplementedDiaryServiceServer()
}

// UnimplementedDiaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiaryServiceServer struct{}

func (UnimplementedDiaryServiceServer) CreateDiaryEntry(context.Context, *CreateDiaryEntryRequest) (*CreateDiaryEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiaryEntry not implemented")
}
func (UnimplementedDiaryServiceServer) GetDiaryEntry(context.Context, *GetDiaryEntryRequest) (*GetDiaryEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiaryEntry not implemented")
}
func (UnimplementedDiaryServiceServer) ListDiaryEntries(context.Context, *ListDiaryEntriesRequest) (*ListDiaryEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiaryEntries not implemented")
}
func (UnimplementedDiaryServiceServer) SearchDiaryEntries(context.Context, *SearchDiaryEntriesRequest) (*SearchDiaryEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDiaryEntries not implemented")
}
func (UnimplementedDiaryServiceServer) UpdateDiaryEntry(context.Context, *UpdateDiaryEntryRequest) (*UpdateDiaryEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiaryEntry not implemented")
}
func (UnimplementedDiaryServiceServer) DeleteDiaryEntry(context.Context, *DeleteDiaryEntryRequest) (*DeleteDiaryEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiaryEntry not implemented")
}
func (UnimplementedDiaryServiceServer) mustEmbedUnimplementedDiaryServiceServer() {}
func (UnimplementedDiaryServiceServer) testEmbeddedByValue()                      {}

// UnsafeDiaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiaryServiceServer will
// result in compilation errors.
type UnsafeDiaryServiceServer interface {
	mustEmbedUnimplementedDiaryServiceServer()
}

func RegisterDiaryServiceServer(s grpc.ServiceRegistrar, srv DiaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDiaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiaryService_ServiceDesc, srv)
}

func _DiaryService_CreateDiaryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiaryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).CreateDiaryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_CreateDiaryEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).CreateDiaryEntry(ctx, req.(*CreateDiaryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_GetDiaryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiaryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).GetDiaryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_GetDiaryEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).GetDiaryEntry(ctx, req.(*GetDiaryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_ListDiaryEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiaryEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).ListDiaryEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_ListDiaryEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).ListDiaryEntries(ctx, req.(*ListDiaryEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_SearchDiaryEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDiaryEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).SearchDiaryEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_SearchDiaryEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).SearchDiaryEntries(ctx, req.(*SearchDiaryEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_UpdateDiaryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiaryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).UpdateDiaryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_UpdateDiaryEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).UpdateDiaryEntry(ctx, req.(*UpdateDiaryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_DeleteDiaryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiaryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).DeleteDiaryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_DeleteDiaryEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).DeleteDiaryEntry(ctx, req.(*DeleteDiaryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiaryService_ServiceDesc is the grpc.ServiceDesc for DiaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diary.DiaryService",
	HandlerType: (*DiaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDiaryEntry",
			Handler:    _DiaryService_CreateDiaryEntry_Handler,
		},
		{
			MethodName: "GetDiaryEntry",
			Handler:    _DiaryService_GetDiaryEntry_Handler,
		},
		{
			MethodName: "ListDiaryEntries",
			Handler:    _DiaryService_ListDiaryEntries_Handler,
		},
		{
			MethodName: "SearchDiaryEntries",
			Handler:    _DiaryService_SearchDiaryEntries_Handler,
		},
		{
			MethodName: "UpdateDiaryEntry",
			Handler:    _DiaryService_UpdateDiaryEntry_Handler,
		},
		{
			MethodName: "DeleteDiaryEntry",
			Handler:    _DiaryService_DeleteDiaryEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/diary/diary.proto",
}
