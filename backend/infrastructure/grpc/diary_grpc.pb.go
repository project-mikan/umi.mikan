// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: diary/diary.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DiaryService_CreateDiaryEntry_FullMethodName       = "/diary.DiaryService/CreateDiaryEntry"
	DiaryService_UpdateDiaryEntry_FullMethodName       = "/diary.DiaryService/UpdateDiaryEntry"
	DiaryService_DeleteDiaryEntry_FullMethodName       = "/diary.DiaryService/DeleteDiaryEntry"
	DiaryService_GetDiaryEntry_FullMethodName          = "/diary.DiaryService/GetDiaryEntry"
	DiaryService_GetDiaryEntries_FullMethodName        = "/diary.DiaryService/GetDiaryEntries"
	DiaryService_GetDiaryEntriesByMonth_FullMethodName = "/diary.DiaryService/GetDiaryEntriesByMonth"
	DiaryService_SearchDiaryEntries_FullMethodName     = "/diary.DiaryService/SearchDiaryEntries"
	DiaryService_GenerateMonthlySummary_FullMethodName = "/diary.DiaryService/GenerateMonthlySummary"
	DiaryService_GetMonthlySummary_FullMethodName      = "/diary.DiaryService/GetMonthlySummary"
	DiaryService_GenerateDailySummary_FullMethodName   = "/diary.DiaryService/GenerateDailySummary"
	DiaryService_GetDailySummary_FullMethodName        = "/diary.DiaryService/GetDailySummary"
	DiaryService_GetLatestTrend_FullMethodName         = "/diary.DiaryService/GetLatestTrend"
	DiaryService_TriggerLatestTrend_FullMethodName     = "/diary.DiaryService/TriggerLatestTrend"
)

// DiaryServiceClient is the client API for DiaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DiaryService は日記エントリの作成・読み取り・更新・削除（CRUD）と
// AI要約生成機能を提供するサービスです。
// エンティティとの紐付けにより、固有名詞のハイライト表示や検索が可能です。
type DiaryServiceClient interface {
	// CreateDiaryEntry は新しい日記エントリを作成します。
	// 1日1エントリの制約があり、同じ日付に複数のエントリは作成できません。
	// エンティティとの紐付け（diary_entities）もトランザクション内で同時に作成されます。
	//
	// 例:
	//
	//	request: { content: "今日は友人と会った", date: { year: 2025, month: 10, day: 9 }, diary_entities: [...] }
	//	response: { entry: { id: "uuid", content: "...", ... } }
	//
	// エラー:
	//   - AlreadyExists: 指定された日付の日記が既に存在する
	//   - InvalidArgument: 日付が不正
	CreateDiaryEntry(ctx context.Context, in *CreateDiaryEntryRequest, opts ...grpc.CallOption) (*CreateDiaryEntryResponse, error)
	// UpdateDiaryEntry は既存の日記エントリを更新します。
	// エンティティとの紐付けも同時に更新されます（既存の紐付けは全て削除され、新しい紐付けが作成されます）。
	//
	// 例:
	//
	//	request: { id: "uuid", content: "更新された内容", date: { year: 2025, month: 10, day: 9 }, diary_entities: [...] }
	//	response: { entry: { id: "uuid", content: "更新された内容", ... } }
	//
	// エラー:
	//   - NotFound: 日記エントリが見つからない
	//   - PermissionDenied: 他のユーザーの日記にアクセスしようとした
	UpdateDiaryEntry(ctx context.Context, in *UpdateDiaryEntryRequest, opts ...grpc.CallOption) (*UpdateDiaryEntryResponse, error)
	// DeleteDiaryEntry は日記エントリを削除します。
	// 関連するエンティティとの紐付け（diary_entities）もカスケード削除されます。
	//
	// エラー:
	//   - NotFound: 日記エントリが見つからない
	//   - PermissionDenied: 他のユーザーの日記にアクセスしようとした
	DeleteDiaryEntry(ctx context.Context, in *DeleteDiaryEntryRequest, opts ...grpc.CallOption) (*DeleteDiaryEntryResponse, error)
	// GetDiaryEntry は指定された日付の日記エントリを取得します。
	// エンティティとの紐付け情報も含まれます。
	//
	// 例:
	//
	//	request: { date: { year: 2025, month: 10, day: 9 } }
	//	response: { entry: { id: "uuid", content: "...", diary_entities: [...] } }
	//
	// エラー:
	//   - NotFound: 指定された日付の日記が存在しない
	GetDiaryEntry(ctx context.Context, in *GetDiaryEntryRequest, opts ...grpc.CallOption) (*GetDiaryEntryResponse, error)
	// GetDiaryEntries は指定された複数の日付の日記エントリを取得します。
	// ホームでの直近3日表示や、過去数年分の取得など、柔軟な取得が可能です。
	//
	// 例:
	//
	//	request: { dates: [{ year: 2025, month: 10, day: 9 }, { year: 2025, month: 10, day: 8 }] }
	//	response: { entries: [{ id: "uuid1", ... }, { id: "uuid2", ... }] }
	//
	// エラー: なし（存在する日記のみ返される）
	GetDiaryEntries(ctx context.Context, in *GetDiaryEntriesRequest, opts ...grpc.CallOption) (*GetDiaryEntriesResponse, error)
	// GetDiaryEntriesByMonth は指定された月の全日記エントリを取得します。
	//
	// 例:
	//
	//	request: { month: { year: 2025, month: 10 } }
	//	response: { entries: [{ id: "uuid1", date: { year: 2025, month: 10, day: 1 }, ... }, ...] }
	//
	// エラー: なし（存在する日記のみ返される）
	GetDiaryEntriesByMonth(ctx context.Context, in *GetDiaryEntriesByMonthRequest, opts ...grpc.CallOption) (*GetDiaryEntriesByMonthResponse, error)
	// SearchDiaryEntries はキーワードで日記を全文検索します。
	// PostgreSQLのLIKE検索を使用しています。
	//
	// 例:
	//
	//	request: { keyword: "友人" }
	//	response: { searched_keyword: "友人", entries: [{ id: "uuid", content: "今日は友人と...", ... }] }
	//
	// エラー: なし（見つからない場合は空配列）
	SearchDiaryEntries(ctx context.Context, in *SearchDiaryEntriesRequest, opts ...grpc.CallOption) (*SearchDiaryEntriesResponse, error)
	// GenerateMonthlySummary は指定された月の日記をLLMで要約します。
	// ユーザーのLLMキー設定が必要です。既存のサマリーがある場合は上書きされます。
	//
	// 例:
	//
	//	request: { month: { year: 2025, month: 10 } }
	//	response: { summary: { id: "uuid", month: { year: 2025, month: 10 }, summary: "10月は...", ... } }
	//
	// エラー:
	//   - NotFound: LLMキーが設定されていない、または対象月に日記が存在しない
	//   - Internal: LLM API呼び出しエラー
	GenerateMonthlySummary(ctx context.Context, in *GenerateMonthlySummaryRequest, opts ...grpc.CallOption) (*GenerateMonthlySummaryResponse, error)
	// GetMonthlySummary は指定された月のサマリーを取得します。
	//
	// 例:
	//
	//	request: { month: { year: 2025, month: 10 } }
	//	response: { summary: { id: "uuid", month: { year: 2025, month: 10 }, summary: "10月は...", ... } }
	//
	// エラー:
	//   - NotFound: サマリーが存在しない
	GetMonthlySummary(ctx context.Context, in *GetMonthlySummaryRequest, opts ...grpc.CallOption) (*GetMonthlySummaryResponse, error)
	// GenerateDailySummary は指定された日記をLLMで要約します。
	// ユーザーのLLMキー設定が必要です。既存のサマリーがある場合は上書きされます。
	//
	// 例:
	//
	//	request: { diary_id: "uuid" }
	//	response: { summary: { id: "uuid", diary_id: "uuid", summary: "今日は...", ... } }
	//
	// エラー:
	//   - NotFound: LLMキーが設定されていない、または日記が存在しない
	//   - PermissionDenied: 他のユーザーの日記にアクセスしようとした
	//   - Internal: LLM API呼び出しエラー
	GenerateDailySummary(ctx context.Context, in *GenerateDailySummaryRequest, opts ...grpc.CallOption) (*GenerateDailySummaryResponse, error)
	// GetDailySummary は指定された日付のサマリーを取得します。
	//
	// 例:
	//
	//	request: { date: { year: 2025, month: 10, day: 9 } }
	//	response: { summary: { id: "uuid", date: { year: 2025, month: 10, day: 9 }, summary: "今日は...", ... } }
	//
	// エラー:
	//   - NotFound: サマリーが存在しない
	GetDailySummary(ctx context.Context, in *GetDailySummaryRequest, opts ...grpc.CallOption) (*GetDailySummaryResponse, error)
	// GetLatestTrend は直近3日間の日記のトレンド分析を取得します。
	// Redisに保存された分析結果を返します。
	//
	// 例:
	//
	//	request: {}
	//	response: { overall_summary: "...", health_mood: "...", activities: "...", concerns: "...", period_start: "2025-10-10T00:00:00Z", period_end: "2025-10-16T23:59:59Z", generated_at: "2025-10-17T04:00:00Z" }
	//
	// エラー:
	//   - NotFound: トレンド分析が存在しない
	GetLatestTrend(ctx context.Context, in *GetLatestTrendRequest, opts ...grpc.CallOption) (*GetLatestTrendResponse, error)
	// TriggerLatestTrend はトレンド分析の生成を手動でトリガーします（デバッグ用）。
	// 非production環境でのみ使用可能です。
	//
	// 例:
	//
	//	request: {}
	//	response: { success: true, message: "トレンド分析の生成をキューに追加しました" }
	//
	// エラー:
	//   - PermissionDenied: production環境では使用不可
	//   - NotFound: LLMキーが設定されていない
	TriggerLatestTrend(ctx context.Context, in *TriggerLatestTrendRequest, opts ...grpc.CallOption) (*TriggerLatestTrendResponse, error)
}

type diaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiaryServiceClient(cc grpc.ClientConnInterface) DiaryServiceClient {
	return &diaryServiceClient{cc}
}

func (c *diaryServiceClient) CreateDiaryEntry(ctx context.Context, in *CreateDiaryEntryRequest, opts ...grpc.CallOption) (*CreateDiaryEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDiaryEntryResponse)
	err := c.cc.Invoke(ctx, DiaryService_CreateDiaryEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) UpdateDiaryEntry(ctx context.Context, in *UpdateDiaryEntryRequest, opts ...grpc.CallOption) (*UpdateDiaryEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDiaryEntryResponse)
	err := c.cc.Invoke(ctx, DiaryService_UpdateDiaryEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) DeleteDiaryEntry(ctx context.Context, in *DeleteDiaryEntryRequest, opts ...grpc.CallOption) (*DeleteDiaryEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDiaryEntryResponse)
	err := c.cc.Invoke(ctx, DiaryService_DeleteDiaryEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) GetDiaryEntry(ctx context.Context, in *GetDiaryEntryRequest, opts ...grpc.CallOption) (*GetDiaryEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiaryEntryResponse)
	err := c.cc.Invoke(ctx, DiaryService_GetDiaryEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) GetDiaryEntries(ctx context.Context, in *GetDiaryEntriesRequest, opts ...grpc.CallOption) (*GetDiaryEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiaryEntriesResponse)
	err := c.cc.Invoke(ctx, DiaryService_GetDiaryEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) GetDiaryEntriesByMonth(ctx context.Context, in *GetDiaryEntriesByMonthRequest, opts ...grpc.CallOption) (*GetDiaryEntriesByMonthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiaryEntriesByMonthResponse)
	err := c.cc.Invoke(ctx, DiaryService_GetDiaryEntriesByMonth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) SearchDiaryEntries(ctx context.Context, in *SearchDiaryEntriesRequest, opts ...grpc.CallOption) (*SearchDiaryEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDiaryEntriesResponse)
	err := c.cc.Invoke(ctx, DiaryService_SearchDiaryEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) GenerateMonthlySummary(ctx context.Context, in *GenerateMonthlySummaryRequest, opts ...grpc.CallOption) (*GenerateMonthlySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateMonthlySummaryResponse)
	err := c.cc.Invoke(ctx, DiaryService_GenerateMonthlySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) GetMonthlySummary(ctx context.Context, in *GetMonthlySummaryRequest, opts ...grpc.CallOption) (*GetMonthlySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonthlySummaryResponse)
	err := c.cc.Invoke(ctx, DiaryService_GetMonthlySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) GenerateDailySummary(ctx context.Context, in *GenerateDailySummaryRequest, opts ...grpc.CallOption) (*GenerateDailySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateDailySummaryResponse)
	err := c.cc.Invoke(ctx, DiaryService_GenerateDailySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) GetDailySummary(ctx context.Context, in *GetDailySummaryRequest, opts ...grpc.CallOption) (*GetDailySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailySummaryResponse)
	err := c.cc.Invoke(ctx, DiaryService_GetDailySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) GetLatestTrend(ctx context.Context, in *GetLatestTrendRequest, opts ...grpc.CallOption) (*GetLatestTrendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestTrendResponse)
	err := c.cc.Invoke(ctx, DiaryService_GetLatestTrend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) TriggerLatestTrend(ctx context.Context, in *TriggerLatestTrendRequest, opts ...grpc.CallOption) (*TriggerLatestTrendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerLatestTrendResponse)
	err := c.cc.Invoke(ctx, DiaryService_TriggerLatestTrend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiaryServiceServer is the server API for DiaryService service.
// All implementations must embed UnimplementedDiaryServiceServer
// for forward compatibility.
//
// DiaryService は日記エントリの作成・読み取り・更新・削除（CRUD）と
// AI要約生成機能を提供するサービスです。
// エンティティとの紐付けにより、固有名詞のハイライト表示や検索が可能です。
type DiaryServiceServer interface {
	// CreateDiaryEntry は新しい日記エントリを作成します。
	// 1日1エントリの制約があり、同じ日付に複数のエントリは作成できません。
	// エンティティとの紐付け（diary_entities）もトランザクション内で同時に作成されます。
	//
	// 例:
	//
	//	request: { content: "今日は友人と会った", date: { year: 2025, month: 10, day: 9 }, diary_entities: [...] }
	//	response: { entry: { id: "uuid", content: "...", ... } }
	//
	// エラー:
	//   - AlreadyExists: 指定された日付の日記が既に存在する
	//   - InvalidArgument: 日付が不正
	CreateDiaryEntry(context.Context, *CreateDiaryEntryRequest) (*CreateDiaryEntryResponse, error)
	// UpdateDiaryEntry は既存の日記エントリを更新します。
	// エンティティとの紐付けも同時に更新されます（既存の紐付けは全て削除され、新しい紐付けが作成されます）。
	//
	// 例:
	//
	//	request: { id: "uuid", content: "更新された内容", date: { year: 2025, month: 10, day: 9 }, diary_entities: [...] }
	//	response: { entry: { id: "uuid", content: "更新された内容", ... } }
	//
	// エラー:
	//   - NotFound: 日記エントリが見つからない
	//   - PermissionDenied: 他のユーザーの日記にアクセスしようとした
	UpdateDiaryEntry(context.Context, *UpdateDiaryEntryRequest) (*UpdateDiaryEntryResponse, error)
	// DeleteDiaryEntry は日記エントリを削除します。
	// 関連するエンティティとの紐付け（diary_entities）もカスケード削除されます。
	//
	// エラー:
	//   - NotFound: 日記エントリが見つからない
	//   - PermissionDenied: 他のユーザーの日記にアクセスしようとした
	DeleteDiaryEntry(context.Context, *DeleteDiaryEntryRequest) (*DeleteDiaryEntryResponse, error)
	// GetDiaryEntry は指定された日付の日記エントリを取得します。
	// エンティティとの紐付け情報も含まれます。
	//
	// 例:
	//
	//	request: { date: { year: 2025, month: 10, day: 9 } }
	//	response: { entry: { id: "uuid", content: "...", diary_entities: [...] } }
	//
	// エラー:
	//   - NotFound: 指定された日付の日記が存在しない
	GetDiaryEntry(context.Context, *GetDiaryEntryRequest) (*GetDiaryEntryResponse, error)
	// GetDiaryEntries は指定された複数の日付の日記エントリを取得します。
	// ホームでの直近3日表示や、過去数年分の取得など、柔軟な取得が可能です。
	//
	// 例:
	//
	//	request: { dates: [{ year: 2025, month: 10, day: 9 }, { year: 2025, month: 10, day: 8 }] }
	//	response: { entries: [{ id: "uuid1", ... }, { id: "uuid2", ... }] }
	//
	// エラー: なし（存在する日記のみ返される）
	GetDiaryEntries(context.Context, *GetDiaryEntriesRequest) (*GetDiaryEntriesResponse, error)
	// GetDiaryEntriesByMonth は指定された月の全日記エントリを取得します。
	//
	// 例:
	//
	//	request: { month: { year: 2025, month: 10 } }
	//	response: { entries: [{ id: "uuid1", date: { year: 2025, month: 10, day: 1 }, ... }, ...] }
	//
	// エラー: なし（存在する日記のみ返される）
	GetDiaryEntriesByMonth(context.Context, *GetDiaryEntriesByMonthRequest) (*GetDiaryEntriesByMonthResponse, error)
	// SearchDiaryEntries はキーワードで日記を全文検索します。
	// PostgreSQLのLIKE検索を使用しています。
	//
	// 例:
	//
	//	request: { keyword: "友人" }
	//	response: { searched_keyword: "友人", entries: [{ id: "uuid", content: "今日は友人と...", ... }] }
	//
	// エラー: なし（見つからない場合は空配列）
	SearchDiaryEntries(context.Context, *SearchDiaryEntriesRequest) (*SearchDiaryEntriesResponse, error)
	// GenerateMonthlySummary は指定された月の日記をLLMで要約します。
	// ユーザーのLLMキー設定が必要です。既存のサマリーがある場合は上書きされます。
	//
	// 例:
	//
	//	request: { month: { year: 2025, month: 10 } }
	//	response: { summary: { id: "uuid", month: { year: 2025, month: 10 }, summary: "10月は...", ... } }
	//
	// エラー:
	//   - NotFound: LLMキーが設定されていない、または対象月に日記が存在しない
	//   - Internal: LLM API呼び出しエラー
	GenerateMonthlySummary(context.Context, *GenerateMonthlySummaryRequest) (*GenerateMonthlySummaryResponse, error)
	// GetMonthlySummary は指定された月のサマリーを取得します。
	//
	// 例:
	//
	//	request: { month: { year: 2025, month: 10 } }
	//	response: { summary: { id: "uuid", month: { year: 2025, month: 10 }, summary: "10月は...", ... } }
	//
	// エラー:
	//   - NotFound: サマリーが存在しない
	GetMonthlySummary(context.Context, *GetMonthlySummaryRequest) (*GetMonthlySummaryResponse, error)
	// GenerateDailySummary は指定された日記をLLMで要約します。
	// ユーザーのLLMキー設定が必要です。既存のサマリーがある場合は上書きされます。
	//
	// 例:
	//
	//	request: { diary_id: "uuid" }
	//	response: { summary: { id: "uuid", diary_id: "uuid", summary: "今日は...", ... } }
	//
	// エラー:
	//   - NotFound: LLMキーが設定されていない、または日記が存在しない
	//   - PermissionDenied: 他のユーザーの日記にアクセスしようとした
	//   - Internal: LLM API呼び出しエラー
	GenerateDailySummary(context.Context, *GenerateDailySummaryRequest) (*GenerateDailySummaryResponse, error)
	// GetDailySummary は指定された日付のサマリーを取得します。
	//
	// 例:
	//
	//	request: { date: { year: 2025, month: 10, day: 9 } }
	//	response: { summary: { id: "uuid", date: { year: 2025, month: 10, day: 9 }, summary: "今日は...", ... } }
	//
	// エラー:
	//   - NotFound: サマリーが存在しない
	GetDailySummary(context.Context, *GetDailySummaryRequest) (*GetDailySummaryResponse, error)
	// GetLatestTrend は直近3日間の日記のトレンド分析を取得します。
	// Redisに保存された分析結果を返します。
	//
	// 例:
	//
	//	request: {}
	//	response: { overall_summary: "...", health_mood: "...", activities: "...", concerns: "...", period_start: "2025-10-10T00:00:00Z", period_end: "2025-10-16T23:59:59Z", generated_at: "2025-10-17T04:00:00Z" }
	//
	// エラー:
	//   - NotFound: トレンド分析が存在しない
	GetLatestTrend(context.Context, *GetLatestTrendRequest) (*GetLatestTrendResponse, error)
	// TriggerLatestTrend はトレンド分析の生成を手動でトリガーします（デバッグ用）。
	// 非production環境でのみ使用可能です。
	//
	// 例:
	//
	//	request: {}
	//	response: { success: true, message: "トレンド分析の生成をキューに追加しました" }
	//
	// エラー:
	//   - PermissionDenied: production環境では使用不可
	//   - NotFound: LLMキーが設定されていない
	TriggerLatestTrend(context.Context, *TriggerLatestTrendRequest) (*TriggerLatestTrendResponse, error)
	mustEmbedUnimplementedDiaryServiceServer()
}

// UnimplementedDiaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiaryServiceServer struct{}

func (UnimplementedDiaryServiceServer) CreateDiaryEntry(context.Context, *CreateDiaryEntryRequest) (*CreateDiaryEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiaryEntry not implemented")
}
func (UnimplementedDiaryServiceServer) UpdateDiaryEntry(context.Context, *UpdateDiaryEntryRequest) (*UpdateDiaryEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiaryEntry not implemented")
}
func (UnimplementedDiaryServiceServer) DeleteDiaryEntry(context.Context, *DeleteDiaryEntryRequest) (*DeleteDiaryEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiaryEntry not implemented")
}
func (UnimplementedDiaryServiceServer) GetDiaryEntry(context.Context, *GetDiaryEntryRequest) (*GetDiaryEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiaryEntry not implemented")
}
func (UnimplementedDiaryServiceServer) GetDiaryEntries(context.Context, *GetDiaryEntriesRequest) (*GetDiaryEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiaryEntries not implemented")
}
func (UnimplementedDiaryServiceServer) GetDiaryEntriesByMonth(context.Context, *GetDiaryEntriesByMonthRequest) (*GetDiaryEntriesByMonthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiaryEntriesByMonth not implemented")
}
func (UnimplementedDiaryServiceServer) SearchDiaryEntries(context.Context, *SearchDiaryEntriesRequest) (*SearchDiaryEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDiaryEntries not implemented")
}
func (UnimplementedDiaryServiceServer) GenerateMonthlySummary(context.Context, *GenerateMonthlySummaryRequest) (*GenerateMonthlySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMonthlySummary not implemented")
}
func (UnimplementedDiaryServiceServer) GetMonthlySummary(context.Context, *GetMonthlySummaryRequest) (*GetMonthlySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlySummary not implemented")
}
func (UnimplementedDiaryServiceServer) GenerateDailySummary(context.Context, *GenerateDailySummaryRequest) (*GenerateDailySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDailySummary not implemented")
}
func (UnimplementedDiaryServiceServer) GetDailySummary(context.Context, *GetDailySummaryRequest) (*GetDailySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailySummary not implemented")
}
func (UnimplementedDiaryServiceServer) GetLatestTrend(context.Context, *GetLatestTrendRequest) (*GetLatestTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestTrend not implemented")
}
func (UnimplementedDiaryServiceServer) TriggerLatestTrend(context.Context, *TriggerLatestTrendRequest) (*TriggerLatestTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerLatestTrend not implemented")
}
func (UnimplementedDiaryServiceServer) mustEmbedUnimplementedDiaryServiceServer() {}
func (UnimplementedDiaryServiceServer) testEmbeddedByValue()                      {}

// UnsafeDiaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiaryServiceServer will
// result in compilation errors.
type UnsafeDiaryServiceServer interface {
	mustEmbedUnimplementedDiaryServiceServer()
}

func RegisterDiaryServiceServer(s grpc.ServiceRegistrar, srv DiaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDiaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiaryService_ServiceDesc, srv)
}

func _DiaryService_CreateDiaryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiaryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).CreateDiaryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_CreateDiaryEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).CreateDiaryEntry(ctx, req.(*CreateDiaryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_UpdateDiaryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiaryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).UpdateDiaryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_UpdateDiaryEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).UpdateDiaryEntry(ctx, req.(*UpdateDiaryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_DeleteDiaryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiaryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).DeleteDiaryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_DeleteDiaryEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).DeleteDiaryEntry(ctx, req.(*DeleteDiaryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_GetDiaryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiaryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).GetDiaryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_GetDiaryEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).GetDiaryEntry(ctx, req.(*GetDiaryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_GetDiaryEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiaryEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).GetDiaryEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_GetDiaryEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).GetDiaryEntries(ctx, req.(*GetDiaryEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_GetDiaryEntriesByMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiaryEntriesByMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).GetDiaryEntriesByMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_GetDiaryEntriesByMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).GetDiaryEntriesByMonth(ctx, req.(*GetDiaryEntriesByMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_SearchDiaryEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDiaryEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).SearchDiaryEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_SearchDiaryEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).SearchDiaryEntries(ctx, req.(*SearchDiaryEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_GenerateMonthlySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMonthlySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).GenerateMonthlySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_GenerateMonthlySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).GenerateMonthlySummary(ctx, req.(*GenerateMonthlySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_GetMonthlySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).GetMonthlySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_GetMonthlySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).GetMonthlySummary(ctx, req.(*GetMonthlySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_GenerateDailySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDailySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).GenerateDailySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_GenerateDailySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).GenerateDailySummary(ctx, req.(*GenerateDailySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_GetDailySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).GetDailySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_GetDailySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).GetDailySummary(ctx, req.(*GetDailySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_GetLatestTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).GetLatestTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_GetLatestTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).GetLatestTrend(ctx, req.(*GetLatestTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_TriggerLatestTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerLatestTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).TriggerLatestTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaryService_TriggerLatestTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).TriggerLatestTrend(ctx, req.(*TriggerLatestTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiaryService_ServiceDesc is the grpc.ServiceDesc for DiaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diary.DiaryService",
	HandlerType: (*DiaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDiaryEntry",
			Handler:    _DiaryService_CreateDiaryEntry_Handler,
		},
		{
			MethodName: "UpdateDiaryEntry",
			Handler:    _DiaryService_UpdateDiaryEntry_Handler,
		},
		{
			MethodName: "DeleteDiaryEntry",
			Handler:    _DiaryService_DeleteDiaryEntry_Handler,
		},
		{
			MethodName: "GetDiaryEntry",
			Handler:    _DiaryService_GetDiaryEntry_Handler,
		},
		{
			MethodName: "GetDiaryEntries",
			Handler:    _DiaryService_GetDiaryEntries_Handler,
		},
		{
			MethodName: "GetDiaryEntriesByMonth",
			Handler:    _DiaryService_GetDiaryEntriesByMonth_Handler,
		},
		{
			MethodName: "SearchDiaryEntries",
			Handler:    _DiaryService_SearchDiaryEntries_Handler,
		},
		{
			MethodName: "GenerateMonthlySummary",
			Handler:    _DiaryService_GenerateMonthlySummary_Handler,
		},
		{
			MethodName: "GetMonthlySummary",
			Handler:    _DiaryService_GetMonthlySummary_Handler,
		},
		{
			MethodName: "GenerateDailySummary",
			Handler:    _DiaryService_GenerateDailySummary_Handler,
		},
		{
			MethodName: "GetDailySummary",
			Handler:    _DiaryService_GetDailySummary_Handler,
		},
		{
			MethodName: "GetLatestTrend",
			Handler:    _DiaryService_GetLatestTrend_Handler,
		},
		{
			MethodName: "TriggerLatestTrend",
			Handler:    _DiaryService_TriggerLatestTrend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diary/diary.proto",
}
