// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: auth/auth.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_GetRegistrationConfig_FullMethodName = "/auth.AuthService/GetRegistrationConfig"
	AuthService_RegisterByPassword_FullMethodName    = "/auth.AuthService/RegisterByPassword"
	AuthService_LoginByPassword_FullMethodName       = "/auth.AuthService/LoginByPassword"
	AuthService_RefreshAccessToken_FullMethodName    = "/auth.AuthService/RefreshAccessToken"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AuthService はユーザー認証と登録を管理するサービスです。
// JWT（Access Token + Refresh Token）ベースの認証を提供します。
type AuthServiceClient interface {
	// GetRegistrationConfig は新規登録に必要な設定情報を取得します。
	// REGISTER_KEY環境変数が設定されている場合、登録キーが必要かどうかを返します。
	//
	// 例:
	//
	//	request: {}
	//	response: { register_key_required: true }
	//
	// エラー: なし（常に成功）
	GetRegistrationConfig(ctx context.Context, in *GetRegistrationConfigRequest, opts ...grpc.CallOption) (*GetRegistrationConfigResponse, error)
	// RegisterByPassword はメールアドレスとパスワードで新規ユーザーを登録します。
	// REGISTER_KEYが設定されている場合は、正しい登録キーが必要です。
	//
	// 例:
	//
	//	request: { email: "user@example.com", password: "pass123", name: "太郎", register_key: "secret" }
	//	response: { access_token: "...", refresh_token: "...", expires_in: 900 }
	//
	// エラー:
	//   - AlreadyExists: メールアドレスが既に登録されている
	//   - InvalidArgument: 登録キーが必須だが提供されていない
	//   - PermissionDenied: 登録キーが不正
	//   - InvalidArgument: バリデーションエラー（メール形式、パスワード長など）
	RegisterByPassword(ctx context.Context, in *RegisterByPasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// LoginByPassword はメールアドレスとパスワードでログインします。
	//
	// 例:
	//
	//	request: { email: "user@example.com", password: "pass123" }
	//	response: { access_token: "...", refresh_token: "...", expires_in: 900 }
	//
	// エラー:
	//   - Unauthenticated: メールアドレスまたはパスワードが不正
	//   - NotFound: ユーザーが存在しない
	LoginByPassword(ctx context.Context, in *LoginByPasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// RefreshAccessToken はRefresh Tokenを使用してAccess Tokenを更新します。
	// Access Tokenの有効期限は15分、Refresh Tokenの有効期限は30日です。
	//
	// 例:
	//
	//	request: { refresh_token: "..." }
	//	response: { access_token: "...", refresh_token: "...", expires_in: 900 }
	//
	// エラー:
	//   - Unauthenticated: Refresh Tokenが無効または期限切れ
	RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GetRegistrationConfig(ctx context.Context, in *GetRegistrationConfigRequest, opts ...grpc.CallOption) (*GetRegistrationConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegistrationConfigResponse)
	err := c.cc.Invoke(ctx, AuthService_GetRegistrationConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RegisterByPassword(ctx context.Context, in *RegisterByPasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthService_RegisterByPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LoginByPassword(ctx context.Context, in *LoginByPasswordRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthService_LoginByPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthService_RefreshAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
//
// AuthService はユーザー認証と登録を管理するサービスです。
// JWT（Access Token + Refresh Token）ベースの認証を提供します。
type AuthServiceServer interface {
	// GetRegistrationConfig は新規登録に必要な設定情報を取得します。
	// REGISTER_KEY環境変数が設定されている場合、登録キーが必要かどうかを返します。
	//
	// 例:
	//
	//	request: {}
	//	response: { register_key_required: true }
	//
	// エラー: なし（常に成功）
	GetRegistrationConfig(context.Context, *GetRegistrationConfigRequest) (*GetRegistrationConfigResponse, error)
	// RegisterByPassword はメールアドレスとパスワードで新規ユーザーを登録します。
	// REGISTER_KEYが設定されている場合は、正しい登録キーが必要です。
	//
	// 例:
	//
	//	request: { email: "user@example.com", password: "pass123", name: "太郎", register_key: "secret" }
	//	response: { access_token: "...", refresh_token: "...", expires_in: 900 }
	//
	// エラー:
	//   - AlreadyExists: メールアドレスが既に登録されている
	//   - InvalidArgument: 登録キーが必須だが提供されていない
	//   - PermissionDenied: 登録キーが不正
	//   - InvalidArgument: バリデーションエラー（メール形式、パスワード長など）
	RegisterByPassword(context.Context, *RegisterByPasswordRequest) (*AuthResponse, error)
	// LoginByPassword はメールアドレスとパスワードでログインします。
	//
	// 例:
	//
	//	request: { email: "user@example.com", password: "pass123" }
	//	response: { access_token: "...", refresh_token: "...", expires_in: 900 }
	//
	// エラー:
	//   - Unauthenticated: メールアドレスまたはパスワードが不正
	//   - NotFound: ユーザーが存在しない
	LoginByPassword(context.Context, *LoginByPasswordRequest) (*AuthResponse, error)
	// RefreshAccessToken はRefresh Tokenを使用してAccess Tokenを更新します。
	// Access Tokenの有効期限は15分、Refresh Tokenの有効期限は30日です。
	//
	// 例:
	//
	//	request: { refresh_token: "..." }
	//	response: { access_token: "...", refresh_token: "...", expires_in: 900 }
	//
	// エラー:
	//   - Unauthenticated: Refresh Tokenが無効または期限切れ
	RefreshAccessToken(context.Context, *RefreshAccessTokenRequest) (*AuthResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) GetRegistrationConfig(context.Context, *GetRegistrationConfigRequest) (*GetRegistrationConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistrationConfig not implemented")
}
func (UnimplementedAuthServiceServer) RegisterByPassword(context.Context, *RegisterByPasswordRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByPassword not implemented")
}
func (UnimplementedAuthServiceServer) LoginByPassword(context.Context, *LoginByPasswordRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPassword not implemented")
}
func (UnimplementedAuthServiceServer) RefreshAccessToken(context.Context, *RefreshAccessTokenRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAccessToken not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_GetRegistrationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistrationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetRegistrationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetRegistrationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetRegistrationConfig(ctx, req.(*GetRegistrationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RegisterByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterByPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RegisterByPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterByPassword(ctx, req.(*RegisterByPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LoginByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LoginByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_LoginByPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LoginByPassword(ctx, req.(*LoginByPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RefreshAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshAccessToken(ctx, req.(*RefreshAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegistrationConfig",
			Handler:    _AuthService_GetRegistrationConfig_Handler,
		},
		{
			MethodName: "RegisterByPassword",
			Handler:    _AuthService_RegisterByPassword_Handler,
		},
		{
			MethodName: "LoginByPassword",
			Handler:    _AuthService_LoginByPassword_Handler,
		},
		{
			MethodName: "RefreshAccessToken",
			Handler:    _AuthService_RefreshAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}
