// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: entity/entity.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EntityService_CreateEntity_FullMethodName       = "/entity.EntityService/CreateEntity"
	EntityService_UpdateEntity_FullMethodName       = "/entity.EntityService/UpdateEntity"
	EntityService_DeleteEntity_FullMethodName       = "/entity.EntityService/DeleteEntity"
	EntityService_GetEntity_FullMethodName          = "/entity.EntityService/GetEntity"
	EntityService_ListEntities_FullMethodName       = "/entity.EntityService/ListEntities"
	EntityService_CreateEntityAlias_FullMethodName  = "/entity.EntityService/CreateEntityAlias"
	EntityService_UpdateEntityAlias_FullMethodName  = "/entity.EntityService/UpdateEntityAlias"
	EntityService_DeleteEntityAlias_FullMethodName  = "/entity.EntityService/DeleteEntityAlias"
	EntityService_SearchEntities_FullMethodName     = "/entity.EntityService/SearchEntities"
	EntityService_GetDiariesByEntity_FullMethodName = "/entity.EntityService/GetDiariesByEntity"
)

// EntityServiceClient is the client API for EntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EntityService は固有名詞（人物、場所など）を管理するサービスです。
// エンティティは日記本文中で使用され、ハイライト表示や検索に利用されます。
type EntityServiceClient interface {
	// CreateEntity は新しいエンティティを作成します。
	//
	// 例:
	//
	//	request: { name: "山田太郎", category: PEOPLE, memo: "友人" }
	//	response: { entity: { id: "uuid", name: "山田太郎", ... } }
	//
	// エラー:
	//   - AlreadyExists: 同じ名前のエンティティまたはエイリアスが既に存在する
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	// UpdateEntity は既存のエンティティを更新します。
	//
	// 例:
	//
	//	request: { id: "uuid", name: "山田花子", category: PEOPLE, memo: "同僚" }
	//
	// エラー:
	//   - NotFound: エンティティが見つからない
	//   - PermissionDenied: 他のユーザーのエンティティにアクセスしようとした
	UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*UpdateEntityResponse, error)
	// DeleteEntity はエンティティとそれに紐づくエイリアスを削除します。
	// 日記との紐付け(diary_entities)もカスケード削除されます。
	//
	// エラー:
	//   - NotFound: エンティティが見つからない
	//   - PermissionDenied: 他のユーザーのエンティティにアクセスしようとした
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error)
	// GetEntity は指定されたIDのエンティティを取得します。
	// エイリアスも含めて返されます。
	//
	// エラー:
	//   - NotFound: エンティティが見つからない
	//   - PermissionDenied: 他のユーザーのエンティティにアクセスしようとした
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	// ListEntities はユーザーのエンティティ一覧を取得します。
	// カテゴリでフィルタリングも可能です。
	//
	// 例（全件取得）:
	//
	//	request: { all_categories: true }
	//
	// 例（カテゴリフィルタ）:
	//
	//	request: { category: PEOPLE, all_categories: false }
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	// CreateEntityAlias はエンティティにエイリアス（別名）を追加します。
	// エイリアスは日記入力時の補完候補として使用されます。
	//
	// 例:
	//
	//	request: { entity_id: "uuid", alias: "太郎" }
	//
	// エラー:
	//   - AlreadyExists: 同じエイリアスまたはエンティティ名が既に存在する
	//   - PermissionDenied: 他のユーザーのエンティティにアクセスしようとした
	CreateEntityAlias(ctx context.Context, in *CreateEntityAliasRequest, opts ...grpc.CallOption) (*CreateEntityAliasResponse, error)
	// UpdateEntityAlias はエイリアスを更新します。
	//
	// 例:
	//
	//	request: { id: "uuid", alias: "太郎くん" }
	//
	// エラー:
	//   - NotFound: エイリアスが見つからない
	//   - AlreadyExists: 同じエイリアスまたはエンティティ名が既に存在する
	//   - PermissionDenied: 他のユーザーのエンティティのエイリアスにアクセスしようとした
	UpdateEntityAlias(ctx context.Context, in *UpdateEntityAliasRequest, opts ...grpc.CallOption) (*UpdateEntityAliasResponse, error)
	// DeleteEntityAlias はエイリアスを削除します。
	//
	// エラー:
	//   - NotFound: エイリアスが見つからない
	//   - PermissionDenied: 他のユーザーのエンティティのエイリアスにアクセスしようとした
	DeleteEntityAlias(ctx context.Context, in *DeleteEntityAliasRequest, opts ...grpc.CallOption) (*DeleteEntityAliasResponse, error)
	// SearchEntities はエンティティ名またはエイリアスで部分一致検索を行います。
	// 主に日記入力時の補完候補として使用されます。
	//
	// 例:
	//
	//	request: { query: "山田" }
	//	response: { entities: [{ name: "山田太郎", ... }, { name: "山田花子", ... }] }
	//
	// 空文字列を指定すると全件取得されます。
	SearchEntities(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*SearchEntitiesResponse, error)
	// GetDiariesByEntity は指定されたエンティティが登場する日記の一覧を取得します。
	// 各日記でのエンティティの登場位置も含まれます。
	//
	// 例:
	//
	//	request: { entity_id: "uuid" }
	//	response: { diaries: [{ content: "...", positions: [{ start: 0, end: 4 }], ... }] }
	//
	// エラー:
	//   - NotFound: エンティティが見つからない
	//   - PermissionDenied: 他のユーザーのエンティティにアクセスしようとした
	GetDiariesByEntity(ctx context.Context, in *GetDiariesByEntityRequest, opts ...grpc.CallOption) (*GetDiariesByEntityResponse, error)
}

type entityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityServiceClient(cc grpc.ClientConnInterface) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEntityResponse)
	err := c.cc.Invoke(ctx, EntityService_CreateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*UpdateEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEntityResponse)
	err := c.cc.Invoke(ctx, EntityService_UpdateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEntityResponse)
	err := c.cc.Invoke(ctx, EntityService_DeleteEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, EntityService_GetEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, EntityService_ListEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) CreateEntityAlias(ctx context.Context, in *CreateEntityAliasRequest, opts ...grpc.CallOption) (*CreateEntityAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEntityAliasResponse)
	err := c.cc.Invoke(ctx, EntityService_CreateEntityAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateEntityAlias(ctx context.Context, in *UpdateEntityAliasRequest, opts ...grpc.CallOption) (*UpdateEntityAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEntityAliasResponse)
	err := c.cc.Invoke(ctx, EntityService_UpdateEntityAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) DeleteEntityAlias(ctx context.Context, in *DeleteEntityAliasRequest, opts ...grpc.CallOption) (*DeleteEntityAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEntityAliasResponse)
	err := c.cc.Invoke(ctx, EntityService_DeleteEntityAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) SearchEntities(ctx context.Context, in *SearchEntitiesRequest, opts ...grpc.CallOption) (*SearchEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchEntitiesResponse)
	err := c.cc.Invoke(ctx, EntityService_SearchEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetDiariesByEntity(ctx context.Context, in *GetDiariesByEntityRequest, opts ...grpc.CallOption) (*GetDiariesByEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiariesByEntityResponse)
	err := c.cc.Invoke(ctx, EntityService_GetDiariesByEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServiceServer is the server API for EntityService service.
// All implementations must embed UnimplementedEntityServiceServer
// for forward compatibility.
//
// EntityService は固有名詞（人物、場所など）を管理するサービスです。
// エンティティは日記本文中で使用され、ハイライト表示や検索に利用されます。
type EntityServiceServer interface {
	// CreateEntity は新しいエンティティを作成します。
	//
	// 例:
	//
	//	request: { name: "山田太郎", category: PEOPLE, memo: "友人" }
	//	response: { entity: { id: "uuid", name: "山田太郎", ... } }
	//
	// エラー:
	//   - AlreadyExists: 同じ名前のエンティティまたはエイリアスが既に存在する
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error)
	// UpdateEntity は既存のエンティティを更新します。
	//
	// 例:
	//
	//	request: { id: "uuid", name: "山田花子", category: PEOPLE, memo: "同僚" }
	//
	// エラー:
	//   - NotFound: エンティティが見つからない
	//   - PermissionDenied: 他のユーザーのエンティティにアクセスしようとした
	UpdateEntity(context.Context, *UpdateEntityRequest) (*UpdateEntityResponse, error)
	// DeleteEntity はエンティティとそれに紐づくエイリアスを削除します。
	// 日記との紐付け(diary_entities)もカスケード削除されます。
	//
	// エラー:
	//   - NotFound: エンティティが見つからない
	//   - PermissionDenied: 他のユーザーのエンティティにアクセスしようとした
	DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error)
	// GetEntity は指定されたIDのエンティティを取得します。
	// エイリアスも含めて返されます。
	//
	// エラー:
	//   - NotFound: エンティティが見つからない
	//   - PermissionDenied: 他のユーザーのエンティティにアクセスしようとした
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	// ListEntities はユーザーのエンティティ一覧を取得します。
	// カテゴリでフィルタリングも可能です。
	//
	// 例（全件取得）:
	//
	//	request: { all_categories: true }
	//
	// 例（カテゴリフィルタ）:
	//
	//	request: { category: PEOPLE, all_categories: false }
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	// CreateEntityAlias はエンティティにエイリアス（別名）を追加します。
	// エイリアスは日記入力時の補完候補として使用されます。
	//
	// 例:
	//
	//	request: { entity_id: "uuid", alias: "太郎" }
	//
	// エラー:
	//   - AlreadyExists: 同じエイリアスまたはエンティティ名が既に存在する
	//   - PermissionDenied: 他のユーザーのエンティティにアクセスしようとした
	CreateEntityAlias(context.Context, *CreateEntityAliasRequest) (*CreateEntityAliasResponse, error)
	// UpdateEntityAlias はエイリアスを更新します。
	//
	// 例:
	//
	//	request: { id: "uuid", alias: "太郎くん" }
	//
	// エラー:
	//   - NotFound: エイリアスが見つからない
	//   - AlreadyExists: 同じエイリアスまたはエンティティ名が既に存在する
	//   - PermissionDenied: 他のユーザーのエンティティのエイリアスにアクセスしようとした
	UpdateEntityAlias(context.Context, *UpdateEntityAliasRequest) (*UpdateEntityAliasResponse, error)
	// DeleteEntityAlias はエイリアスを削除します。
	//
	// エラー:
	//   - NotFound: エイリアスが見つからない
	//   - PermissionDenied: 他のユーザーのエンティティのエイリアスにアクセスしようとした
	DeleteEntityAlias(context.Context, *DeleteEntityAliasRequest) (*DeleteEntityAliasResponse, error)
	// SearchEntities はエンティティ名またはエイリアスで部分一致検索を行います。
	// 主に日記入力時の補完候補として使用されます。
	//
	// 例:
	//
	//	request: { query: "山田" }
	//	response: { entities: [{ name: "山田太郎", ... }, { name: "山田花子", ... }] }
	//
	// 空文字列を指定すると全件取得されます。
	SearchEntities(context.Context, *SearchEntitiesRequest) (*SearchEntitiesResponse, error)
	// GetDiariesByEntity は指定されたエンティティが登場する日記の一覧を取得します。
	// 各日記でのエンティティの登場位置も含まれます。
	//
	// 例:
	//
	//	request: { entity_id: "uuid" }
	//	response: { diaries: [{ content: "...", positions: [{ start: 0, end: 4 }], ... }] }
	//
	// エラー:
	//   - NotFound: エンティティが見つからない
	//   - PermissionDenied: 他のユーザーのエンティティにアクセスしようとした
	GetDiariesByEntity(context.Context, *GetDiariesByEntityRequest) (*GetDiariesByEntityResponse, error)
	mustEmbedUnimplementedEntityServiceServer()
}

// UnimplementedEntityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntityServiceServer struct{}

func (UnimplementedEntityServiceServer) CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedEntityServiceServer) UpdateEntity(context.Context, *UpdateEntityRequest) (*UpdateEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedEntityServiceServer) DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedEntityServiceServer) GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedEntityServiceServer) ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedEntityServiceServer) CreateEntityAlias(context.Context, *CreateEntityAliasRequest) (*CreateEntityAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntityAlias not implemented")
}
func (UnimplementedEntityServiceServer) UpdateEntityAlias(context.Context, *UpdateEntityAliasRequest) (*UpdateEntityAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntityAlias not implemented")
}
func (UnimplementedEntityServiceServer) DeleteEntityAlias(context.Context, *DeleteEntityAliasRequest) (*DeleteEntityAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntityAlias not implemented")
}
func (UnimplementedEntityServiceServer) SearchEntities(context.Context, *SearchEntitiesRequest) (*SearchEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEntities not implemented")
}
func (UnimplementedEntityServiceServer) GetDiariesByEntity(context.Context, *GetDiariesByEntityRequest) (*GetDiariesByEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiariesByEntity not implemented")
}
func (UnimplementedEntityServiceServer) mustEmbedUnimplementedEntityServiceServer() {}
func (UnimplementedEntityServiceServer) testEmbeddedByValue()                       {}

// UnsafeEntityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityServiceServer will
// result in compilation errors.
type UnsafeEntityServiceServer interface {
	mustEmbedUnimplementedEntityServiceServer()
}

func RegisterEntityServiceServer(s grpc.ServiceRegistrar, srv EntityServiceServer) {
	// If the following call pancis, it indicates UnimplementedEntityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EntityService_ServiceDesc, srv)
}

func _EntityService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_CreateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_UpdateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateEntity(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_DeleteEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_ListEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_CreateEntityAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CreateEntityAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_CreateEntityAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CreateEntityAlias(ctx, req.(*CreateEntityAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateEntityAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateEntityAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_UpdateEntityAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateEntityAlias(ctx, req.(*UpdateEntityAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_DeleteEntityAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).DeleteEntityAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_DeleteEntityAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).DeleteEntityAlias(ctx, req.(*DeleteEntityAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_SearchEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).SearchEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_SearchEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).SearchEntities(ctx, req.(*SearchEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetDiariesByEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiariesByEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetDiariesByEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetDiariesByEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetDiariesByEntity(ctx, req.(*GetDiariesByEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityService_ServiceDesc is the grpc.ServiceDesc for EntityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entity.EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _EntityService_CreateEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _EntityService_UpdateEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _EntityService_DeleteEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _EntityService_GetEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _EntityService_ListEntities_Handler,
		},
		{
			MethodName: "CreateEntityAlias",
			Handler:    _EntityService_CreateEntityAlias_Handler,
		},
		{
			MethodName: "UpdateEntityAlias",
			Handler:    _EntityService_UpdateEntityAlias_Handler,
		},
		{
			MethodName: "DeleteEntityAlias",
			Handler:    _EntityService_DeleteEntityAlias_Handler,
		},
		{
			MethodName: "SearchEntities",
			Handler:    _EntityService_SearchEntities_Handler,
		},
		{
			MethodName: "GetDiariesByEntity",
			Handler:    _EntityService_GetDiariesByEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entity/entity.proto",
}
