// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: user/user.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_UpdateUserName_FullMethodName            = "/user.UserService/UpdateUserName"
	UserService_ChangePassword_FullMethodName            = "/user.UserService/ChangePassword"
	UserService_UpdateLLMKey_FullMethodName              = "/user.UserService/UpdateLLMKey"
	UserService_GetUserInfo_FullMethodName               = "/user.UserService/GetUserInfo"
	UserService_DeleteLLMKey_FullMethodName              = "/user.UserService/DeleteLLMKey"
	UserService_DeleteAccount_FullMethodName             = "/user.UserService/DeleteAccount"
	UserService_UpdateAutoSummarySettings_FullMethodName = "/user.UserService/UpdateAutoSummarySettings"
	UserService_GetAutoSummarySettings_FullMethodName    = "/user.UserService/GetAutoSummarySettings"
	UserService_GetPubSubMetrics_FullMethodName          = "/user.UserService/GetPubSubMetrics"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UserService はユーザー設定とアカウント管理を提供するサービスです。
// ユーザー情報の更新、LLMキー管理、自動要約設定、Pub/Subメトリクス取得などの機能があります。
type UserServiceClient interface {
	// UpdateUserName はユーザー名を変更します。
	//
	// 例:
	//
	//	request: { new_name: "新しい名前" }
	//	response: { success: true, message: "ユーザー名を更新しました" }
	//
	// エラー:
	//   - InvalidArgument: 名前が空
	//   - Internal: データベースエラー
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error)
	// ChangePassword は現在のパスワードを検証して新しいパスワードに変更します。
	//
	// 例:
	//
	//	request: { current_password: "old123", new_password: "new456" }
	//	response: { success: true, message: "パスワードを変更しました" }
	//
	// エラー:
	//   - Unauthenticated: 現在のパスワードが不正
	//   - InvalidArgument: 新しいパスワードが短すぎる
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	// UpdateLLMKey はLLM APIキーを更新または新規作成します。
	// 現在はGemini (llm_provider=1) のみ対応しています。
	//
	// 例:
	//
	//	request: { llm_provider: 1, key: "AIza..." }
	//	response: { success: true, message: "LLMキーを更新しました" }
	//
	// エラー:
	//   - InvalidArgument: プロバイダーまたはキーが不正
	UpdateLLMKey(ctx context.Context, in *UpdateLLMKeyRequest, opts ...grpc.CallOption) (*UpdateLLMKeyResponse, error)
	// GetUserInfo はユーザーの基本情報とLLMキー設定を取得します。
	//
	// 例:
	//
	//	request: {}
	//	response: { name: "太郎", email: "user@example.com", llm_keys: [{ llm_provider: 1, ... }] }
	//
	// エラー:
	//   - NotFound: ユーザーが存在しない（通常発生しない、認証済みのため）
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// DeleteLLMKey は指定されたLLM APIキーを削除します。
	//
	// 例:
	//
	//	request: { llm_provider: 1 }
	//	response: { success: true, message: "LLMキーを削除しました" }
	//
	// エラー:
	//   - NotFound: 指定されたプロバイダーのキーが存在しない
	DeleteLLMKey(ctx context.Context, in *DeleteLLMKeyRequest, opts ...grpc.CallOption) (*DeleteLLMKeyResponse, error)
	// DeleteAccount はユーザーアカウントと関連データを完全に削除します。
	// 日記、エンティティ、要約など全てのデータがカスケード削除されます。
	//
	// 例:
	//
	//	request: {}
	//	response: { success: true, message: "アカウントを削除しました" }
	//
	// エラー:
	//   - Internal: 削除処理エラー
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// UpdateAutoSummarySettings は自動要約生成の設定を更新します。
	// 日次要約と月次要約をそれぞれ有効/無効にできます。
	//
	// 例:
	//
	//	request: { llm_provider: 1, auto_summary_daily: true, auto_summary_monthly: false }
	//	response: { success: true, message: "自動要約設定を更新しました" }
	//
	// エラー:
	//   - NotFound: LLMキーが設定されていない
	UpdateAutoSummarySettings(ctx context.Context, in *UpdateAutoSummarySettingsRequest, opts ...grpc.CallOption) (*UpdateAutoSummarySettingsResponse, error)
	// GetAutoSummarySettings は自動要約生成の現在の設定を取得します。
	//
	// 例:
	//
	//	request: { llm_provider: 1 }
	//	response: { auto_summary_daily: true, auto_summary_monthly: false }
	//
	// エラー:
	//   - NotFound: LLMキーが設定されていない
	GetAutoSummarySettings(ctx context.Context, in *GetAutoSummarySettingsRequest, opts ...grpc.CallOption) (*GetAutoSummarySettingsResponse, error)
	// GetPubSubMetrics はRedis Pub/Subによる要約生成タスクの処理状況を取得します。
	// 過去24時間の時間別メトリクス、現在処理中のタスク、統計情報が含まれます。
	//
	// 例:
	//
	//	request: {}
	//	response: { hourly_metrics: [...], processing_tasks: [...], summary: { total_daily_summaries: 10, ... } }
	//
	// エラー: なし（データがない場合は空配列）
	GetPubSubMetrics(ctx context.Context, in *GetPubSubMetricsRequest, opts ...grpc.CallOption) (*GetPubSubMetricsResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserNameResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, UserService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateLLMKey(ctx context.Context, in *UpdateLLMKeyRequest, opts ...grpc.CallOption) (*UpdateLLMKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLLMKeyResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateLLMKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteLLMKey(ctx context.Context, in *DeleteLLMKeyRequest, opts ...grpc.CallOption) (*DeleteLLMKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLLMKeyResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteLLMKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateAutoSummarySettings(ctx context.Context, in *UpdateAutoSummarySettingsRequest, opts ...grpc.CallOption) (*UpdateAutoSummarySettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAutoSummarySettingsResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateAutoSummarySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAutoSummarySettings(ctx context.Context, in *GetAutoSummarySettingsRequest, opts ...grpc.CallOption) (*GetAutoSummarySettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAutoSummarySettingsResponse)
	err := c.cc.Invoke(ctx, UserService_GetAutoSummarySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPubSubMetrics(ctx context.Context, in *GetPubSubMetricsRequest, opts ...grpc.CallOption) (*GetPubSubMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPubSubMetricsResponse)
	err := c.cc.Invoke(ctx, UserService_GetPubSubMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// UserService はユーザー設定とアカウント管理を提供するサービスです。
// ユーザー情報の更新、LLMキー管理、自動要約設定、Pub/Subメトリクス取得などの機能があります。
type UserServiceServer interface {
	// UpdateUserName はユーザー名を変更します。
	//
	// 例:
	//
	//	request: { new_name: "新しい名前" }
	//	response: { success: true, message: "ユーザー名を更新しました" }
	//
	// エラー:
	//   - InvalidArgument: 名前が空
	//   - Internal: データベースエラー
	UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error)
	// ChangePassword は現在のパスワードを検証して新しいパスワードに変更します。
	//
	// 例:
	//
	//	request: { current_password: "old123", new_password: "new456" }
	//	response: { success: true, message: "パスワードを変更しました" }
	//
	// エラー:
	//   - Unauthenticated: 現在のパスワードが不正
	//   - InvalidArgument: 新しいパスワードが短すぎる
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	// UpdateLLMKey はLLM APIキーを更新または新規作成します。
	// 現在はGemini (llm_provider=1) のみ対応しています。
	//
	// 例:
	//
	//	request: { llm_provider: 1, key: "AIza..." }
	//	response: { success: true, message: "LLMキーを更新しました" }
	//
	// エラー:
	//   - InvalidArgument: プロバイダーまたはキーが不正
	UpdateLLMKey(context.Context, *UpdateLLMKeyRequest) (*UpdateLLMKeyResponse, error)
	// GetUserInfo はユーザーの基本情報とLLMキー設定を取得します。
	//
	// 例:
	//
	//	request: {}
	//	response: { name: "太郎", email: "user@example.com", llm_keys: [{ llm_provider: 1, ... }] }
	//
	// エラー:
	//   - NotFound: ユーザーが存在しない（通常発生しない、認証済みのため）
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// DeleteLLMKey は指定されたLLM APIキーを削除します。
	//
	// 例:
	//
	//	request: { llm_provider: 1 }
	//	response: { success: true, message: "LLMキーを削除しました" }
	//
	// エラー:
	//   - NotFound: 指定されたプロバイダーのキーが存在しない
	DeleteLLMKey(context.Context, *DeleteLLMKeyRequest) (*DeleteLLMKeyResponse, error)
	// DeleteAccount はユーザーアカウントと関連データを完全に削除します。
	// 日記、エンティティ、要約など全てのデータがカスケード削除されます。
	//
	// 例:
	//
	//	request: {}
	//	response: { success: true, message: "アカウントを削除しました" }
	//
	// エラー:
	//   - Internal: 削除処理エラー
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// UpdateAutoSummarySettings は自動要約生成の設定を更新します。
	// 日次要約と月次要約をそれぞれ有効/無効にできます。
	//
	// 例:
	//
	//	request: { llm_provider: 1, auto_summary_daily: true, auto_summary_monthly: false }
	//	response: { success: true, message: "自動要約設定を更新しました" }
	//
	// エラー:
	//   - NotFound: LLMキーが設定されていない
	UpdateAutoSummarySettings(context.Context, *UpdateAutoSummarySettingsRequest) (*UpdateAutoSummarySettingsResponse, error)
	// GetAutoSummarySettings は自動要約生成の現在の設定を取得します。
	//
	// 例:
	//
	//	request: { llm_provider: 1 }
	//	response: { auto_summary_daily: true, auto_summary_monthly: false }
	//
	// エラー:
	//   - NotFound: LLMキーが設定されていない
	GetAutoSummarySettings(context.Context, *GetAutoSummarySettingsRequest) (*GetAutoSummarySettingsResponse, error)
	// GetPubSubMetrics はRedis Pub/Subによる要約生成タスクの処理状況を取得します。
	// 過去24時間の時間別メトリクス、現在処理中のタスク、統計情報が含まれます。
	//
	// 例:
	//
	//	request: {}
	//	response: { hourly_metrics: [...], processing_tasks: [...], summary: { total_daily_summaries: 10, ... } }
	//
	// エラー: なし（データがない場合は空配列）
	GetPubSubMetrics(context.Context, *GetPubSubMetricsRequest) (*GetPubSubMetricsResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedUserServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServiceServer) UpdateLLMKey(context.Context, *UpdateLLMKeyRequest) (*UpdateLLMKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLLMKey not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) DeleteLLMKey(context.Context, *DeleteLLMKeyRequest) (*DeleteLLMKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLLMKey not implemented")
}
func (UnimplementedUserServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedUserServiceServer) UpdateAutoSummarySettings(context.Context, *UpdateAutoSummarySettingsRequest) (*UpdateAutoSummarySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoSummarySettings not implemented")
}
func (UnimplementedUserServiceServer) GetAutoSummarySettings(context.Context, *GetAutoSummarySettingsRequest) (*GetAutoSummarySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoSummarySettings not implemented")
}
func (UnimplementedUserServiceServer) GetPubSubMetrics(context.Context, *GetPubSubMetricsRequest) (*GetPubSubMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPubSubMetrics not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserName(ctx, req.(*UpdateUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateLLMKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLLMKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateLLMKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateLLMKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateLLMKey(ctx, req.(*UpdateLLMKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteLLMKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLLMKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteLLMKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteLLMKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteLLMKey(ctx, req.(*DeleteLLMKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateAutoSummarySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoSummarySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateAutoSummarySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateAutoSummarySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateAutoSummarySettings(ctx, req.(*UpdateAutoSummarySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAutoSummarySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoSummarySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAutoSummarySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAutoSummarySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAutoSummarySettings(ctx, req.(*GetAutoSummarySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetPubSubMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPubSubMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetPubSubMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetPubSubMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetPubSubMetrics(ctx, req.(*GetPubSubMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserName",
			Handler:    _UserService_UpdateUserName_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
		{
			MethodName: "UpdateLLMKey",
			Handler:    _UserService_UpdateLLMKey_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "DeleteLLMKey",
			Handler:    _UserService_DeleteLLMKey_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _UserService_DeleteAccount_Handler,
		},
		{
			MethodName: "UpdateAutoSummarySettings",
			Handler:    _UserService_UpdateAutoSummarySettings_Handler,
		},
		{
			MethodName: "GetAutoSummarySettings",
			Handler:    _UserService_GetAutoSummarySettings_Handler,
		},
		{
			MethodName: "GetPubSubMetrics",
			Handler:    _UserService_GetPubSubMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
