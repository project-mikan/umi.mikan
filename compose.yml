services:
  backend:
    build:
      context: ./backend
      dockerfile: ../infra/dev/backend/Dockerfile
    volumes:
      - ./backend:/backend
      - ./proto:/proto # 内部で解決できるようにマウント
    environment:
      TZ: Asia/Tokyo
      PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: dev-pass
      DB_NAME: umi_mikan
      JWT_SECRET: "hogehoge"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TEST_DB_HOST: postgres_test
      TEST_DB_PORT: 5432
      TEST_DB_USER: postgres
      TEST_DB_PASSWORD: test-pass
      TEST_DB_NAME: umi_mikan_test
    tty: true
    ports:
      - 8080:8080

  frontend:
    build:
      context: ./frontend
      dockerfile: ../infra/dev/frontend/Dockerfile
    tty: true
    stdin_open: true
    ports:
      - "5173:5173"
      # - "2802:2802" # playwright report
      # - "24678:24678" # hot relaod
    user: "1000:1000"
    volumes:
      - ./frontend:/frontend
      - ./proto:/proto # 内部で解決できるようにマウント

  postgres:
    image: postgres:17
    restart: always
    environment:
      TZ: Asia/Tokyo
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "dev-pass"
      POSTGRES_DB: "umi_mikan"
    ports:
      - "5432:5432"
    volumes:
      - postgres_volume:/var/lib/postgresql/data
      - ./schema:/docker-entrypoint-initdb.d

  postgres_test:
    image: postgres:17
    restart: always
    environment:
      TZ: Asia/Tokyo
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "test-pass"
      POSTGRES_DB: "umi_mikan_test"
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_volume:/var/lib/postgresql/data
      - ./schema:/docker-entrypoint-initdb.d

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_volume:/data

volumes:
  postgres_volume:
  postgres_test_volume:
  redis_volume:
