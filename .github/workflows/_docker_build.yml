name: „Äêgeneral„ÄëDocker Build

on:
  workflow_call:
    inputs:
      services:
        description: 'JSON array of services to build (e.g., ["backend", "frontend", "scheduler", "subscriber"])'
        required: true
        type: string
      registry:
        description: 'Container registry to push to'
        required: false
        type: string
        default: 'ghcr.io'
      platforms:
        description: 'Target platforms for builds'
        required: false
        type: string
        default: 'linux/arm64,linux/amd64'
      push:
        description: 'Whether to push the built images'
        required: false
        type: boolean
        default: true
    secrets:
      GITHUB_TOKEN:
        required: true
      NOTIFY_DISCORD_WEBHOOK:
        required: false

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    if: contains(fromJson(inputs.services), 'backend')
    steps:
      - name: Build and Push Backend
        uses: ./.github/actions/docker-build
        with:
          service: backend
          registry: ${{ inputs.registry }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    if: contains(fromJson(inputs.services), 'frontend')
    steps:
      - name: Build and Push Frontend
        uses: ./.github/actions/docker-build
        with:
          service: frontend
          registry: ${{ inputs.registry }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-scheduler:
    name: Build Scheduler
    runs-on: ubuntu-latest
    if: contains(fromJson(inputs.services), 'scheduler')
    steps:
      - name: Build and Push Scheduler
        uses: ./.github/actions/docker-build
        with:
          service: scheduler
          registry: ${{ inputs.registry }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-subscriber:
    name: Build Subscriber
    runs-on: ubuntu-latest
    if: contains(fromJson(inputs.services), 'subscriber')
    steps:
      - name: Build and Push Subscriber
        uses: ./.github/actions/docker-build
        with:
          service: subscriber
          registry: ${{ inputs.registry }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-scheduler, build-subscriber]
    if: always() && secrets.NOTIFY_DISCORD_WEBHOOK != ''

    steps:
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.NOTIFY_DISCORD_WEBHOOK }}
          title: "üê≥ Docker Build Notification"
          description: |
            **PR**: ${{ github.event.pull_request.title || github.ref_name }}
            **Author**: ${{ github.event.pull_request.user.login || github.actor }}
            **Status**: ${{ (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') && (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') && (needs.build-scheduler.result == 'success' || needs.build-scheduler.result == 'skipped') && (needs.build-subscriber.result == 'success' || needs.build-subscriber.result == 'skipped') && '‚úÖ All Docker images built successfully!' || '‚ùå Docker build failed' }}

            **Images Built**: ${{ inputs.services }}
          color: ${{ (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') && (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') && (needs.build-scheduler.result == 'success' || needs.build-scheduler.result == 'skipped') && (needs.build-subscriber.result == 'success' || needs.build-subscriber.result == 'skipped') && '3066993' || '15158332' }}
          url: ${{ github.event.pull_request.html_url || github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          username: "GitHub Actions"
          avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"