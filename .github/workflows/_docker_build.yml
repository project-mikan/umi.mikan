name: „Äêgeneral„ÄëDocker Build

on:
  workflow_call:
    inputs:
      services:
        description: 'JSON array of services to build (e.g., ["backend", "frontend", "scheduler", "subscriber"])'
        required: true
        type: string
      registry:
        description: 'Container registry to push to'
        required: false
        type: string
        default: 'ghcr.io'
      platforms:
        description: 'Target platforms for builds'
        required: false
        type: string
        default: 'linux/arm64,linux/amd64'
      push:
        description: 'Whether to push the built images'
        required: false
        type: boolean
        default: true
    secrets:
      GITHUB_TOKEN:
        required: true
      NOTIFY_DISCORD_WEBHOOK:
        required: false

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(inputs.services) }}
      max-parallel: 4

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-${{ matrix.service }}
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Set build context
        id: context
        run: |
          case "${{ matrix.service }}" in
            "backend"|"scheduler"|"subscriber")
              echo "context=./backend" >> $GITHUB_OUTPUT
              ;;
            "frontend")
              echo "context=./frontend" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "context=./${{ matrix.service }}" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Build and Push to Container Registry
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.context.outputs.context }}
          file: ./infra/prod/${{ matrix.service }}/Dockerfile
          push: ${{ inputs.push }}
          platforms: ${{ inputs.platforms }}
          tags: |
            ${{ inputs.registry }}/${{ github.repository_owner }}/umi-mikan-${{ matrix.service }}:${{ github.sha }}
            ${{ inputs.registry }}/${{ github.repository_owner }}/umi-mikan-${{ matrix.service }}:latest
          labels: latest
          cache-from: type=local,src=/tmp/.buildx-cache-${{ matrix.service }}
          cache-to: type=local,dest=/tmp/.buildx-cache-${{ matrix.service }}-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-${{ matrix.service }}
          mv /tmp/.buildx-cache-${{ matrix.service }}-new /tmp/.buildx-cache-${{ matrix.service }}

  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: build
    if: always() && secrets.NOTIFY_DISCORD_WEBHOOK != ''

    steps:
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.NOTIFY_DISCORD_WEBHOOK }}
          title: "üê≥ Docker Build Notification"
          description: |
            **PR**: ${{ github.event.pull_request.title || github.ref_name }}
            **Author**: ${{ github.event.pull_request.user.login || github.actor }}
            **Status**: ${{ needs.build.result == 'success' && '‚úÖ All Docker images built successfully!' || '‚ùå Docker build failed' }}

            **Images Built**: ${{ inputs.services }}
          color: ${{ needs.build.result == 'success' && '3066993' || '15158332' }}
          url: ${{ github.event.pull_request.html_url || github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          username: "GitHub Actions"
          avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"