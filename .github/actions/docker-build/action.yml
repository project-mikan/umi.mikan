name: 'Docker Build and Push'
description: 'Build and push Docker image to container registry'
inputs:
  service:
    description: 'Service name to build'
    required: true
  registry:
    description: 'Container registry to push to'
    required: false
    default: 'ghcr.io'
  platforms:
    description: 'Target platforms for builds'
    required: false
    default: 'linux/arm64,linux/amd64'
  push:
    description: 'Whether to push the built images'
    required: false
    default: 'true'
  github-token:
    description: 'GitHub token for registry authentication'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.repository_owner }}
        password: ${{ inputs.github-token }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
          image=moby/buildkit:latest

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ github.repository_owner }}/umi-mikan-${{ inputs.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set build context
      id: context
      shell: bash
      run: |
        case "${{ inputs.service }}" in
          "backend"|"scheduler"|"subscriber")
            echo "context=./backend" >> $GITHUB_OUTPUT
            ;;
          "frontend")
            echo "context=./frontend" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "context=./${{ inputs.service }}" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Cache Go modules
      if: contains(inputs.service, 'backend') || contains(inputs.service, 'scheduler') || contains(inputs.service, 'subscriber')
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache pnpm dependencies
      if: inputs.service == 'frontend'
      uses: actions/cache@v4
      with:
        path: |
          ~/.pnpm-store
          frontend/node_modules/.pnpm
          frontend/.svelte-kit
        key: ${{ runner.os }}-pnpm-${{ hashFiles('frontend/pnpm-lock.yaml') }}-${{ hashFiles('frontend/src/**/*') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-${{ hashFiles('frontend/pnpm-lock.yaml') }}-
          ${{ runner.os }}-pnpm-

    - name: Build and Push to Container Registry
      uses: docker/build-push-action@v5
      with:
        context: ${{ steps.context.outputs.context }}
        file: ./infra/prod/${{ inputs.service }}/Dockerfile
        push: ${{ inputs.push }}
        platforms: ${{ inputs.platforms }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        cache-from: |
          type=gha,scope=${{ inputs.service }}
          type=registry,ref=${{ inputs.registry }}/${{ github.repository_owner }}/umi-mikan-${{ inputs.service }}:buildcache
          type=registry,ref=${{ inputs.registry }}/${{ github.repository_owner }}/umi-mikan-${{ inputs.service }}:latest
        cache-to: |
          type=gha,scope=${{ inputs.service }},mode=max
          type=registry,ref=${{ inputs.registry }}/${{ github.repository_owner }}/umi-mikan-${{ inputs.service }}:buildcache,mode=max
        provenance: false
        sbom: false