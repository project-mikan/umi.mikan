services:
  backend:
    build:
      context: ./backend
      dockerfile: ../infra/prod/backend/Dockerfile
    volumes:
      - ./schema:/schema # pg-schema-diffç”¨
    environment:
      TZ: Asia/Tokyo
      PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: prod-pass
      DB_NAME: umi_mikan
      JWT_SECRET: prod-secret
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: ../infra/prod/frontend/Dockerfile
    environment:
      TZ: Asia/Tokyo
      NODE_ENV: production
      BODY_SIZE_LIMIT: 1M
    restart: unless-stopped
    depends_on:
      - backend

  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      TZ: Asia/Tokyo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: prod-pass
      POSTGRES_DB: umi_mikan
    volumes:
      - postgres_prod_volume:/var/lib/postgresql/data
      - ./schema:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d umi_mikan"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  tunnel:
    restart: always
    image: cloudflare/cloudflared
    command: tunnel run
    depends_on:
      - frontend
    environment:
      TUNNEL_TOKEN: ${TUNNEL_TOKEN}

volumes:
  postgres_prod_volume:
