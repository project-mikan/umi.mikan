services:
  backend:
    build:
      context: ./backend
      dockerfile: ../infra/prod/backend/Dockerfile
    environment:
      TZ: Asia/Tokyo
      PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: prod-pass
      DB_NAME: umi_mikan
      JWT_SECRET: prod-secret
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal

  frontend:
    build:
      context: ./frontend
      dockerfile: ../infra/prod/frontend/Dockerfile
    environment:
      TZ: Asia/Tokyo
      NODE_ENV: production
      BODY_SIZE_LIMIT: 0
    restart: unless-stopped
    ports:
      # web:5173をtailsccale serveがサポートしてないのでlocalhostに一旦出す
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - internal

  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      TZ: Asia/Tokyo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: prod-pass
      POSTGRES_DB: umi_mikan
    volumes:
      - postgres_prod_volume:/var/lib/postgresql/data
      - ./schema:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d umi_mikan"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - internal

  #
  tailscale:
    image: tailscale/tailscale
    hostname: umi-mikan-vpn
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    volumes:
      - /dev/net/tun:/dev/net/tun
      - tailscale-data:/var/lib/tailscale
    environment:
      # https://login.tailscale.com/admin/settings/keys
      TS_AUTHKEY: "${TS_AUTHKEY}"
    command: >
      sh -c "
        tailscaled & 
        sleep 5 &&
        tailscale up --auth-key=${TS_AUTHKEY} --hostname=umi-mikan-vpn &&
        tailscale serve localhost:5173 &
        tail -f /dev/null
      "
    networks:
      - internal

volumes:
  postgres_prod_volume:
  tailscale-data:

networks:
  internal:
    driver: bridge
