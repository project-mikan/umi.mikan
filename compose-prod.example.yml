services:
  backend:
    build:
      context: ./backend
      dockerfile: ../infra/prod/backend/Dockerfile
    environment:
      TZ: Asia/Tokyo
      PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: ${DB_PASSWORD:-prod-pass}
      DB_NAME: umi_mikan
      JWT_SECRET: prod用のsecret
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: ../infra/prod/frontend/Dockerfile
    environment:
      TZ: Asia/Tokyo
      NODE_ENV: production
      BODY_SIZE_LIMIT: 0
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend

  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      TZ: Asia/Tokyo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-prod-pass}
      POSTGRES_DB: umi_mikan
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_volume:/var/lib/postgresql/data
      - ./schema:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d umi_mikan"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Optional: Cloudflare tunnel for production deployment
  tunnel:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel run
    environment:
      TUNNEL_TOKEN: ${TUNNEL_TOKEN}
    profiles:
      - tunnel
    depends_on:
      - frontend
      - backend

volumes:
  postgres_prod_volume:
