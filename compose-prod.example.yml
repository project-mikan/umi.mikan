services:
  backend:
    image: ghcr.io/project-mikan/umi-mikan-backend:latest
    volumes:
      - ./schema:/schema # pg-schema-diffç”¨
    environment:
      BACKEND_ENV: production
      TZ: Asia/Tokyo
      PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: prod-pass
      DB_NAME: umi_mikan
      JWT_SECRET: prod-secret
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "2001:8080"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  frontend:
    image: ghcr.io/project-mikan/umi-mikan-frontend:latest
    environment:
      TZ: Asia/Tokyo
      NODE_ENV: production
      BODY_SIZE_LIMIT: 1M
    ports:
      - "2000:5173"
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - internal

  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      TZ: Asia/Tokyo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: prod-pass
      POSTGRES_DB: umi_mikan
    ports:
      - "2002:5432"
    volumes:
      - postgres_prod_volume:/var/lib/postgresql/data
      - ./schema:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d umi_mikan"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - internal

  redis:
    image: redis:8-alpine
    restart: unless-stopped
    ports:
      - "2004:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_prod_volume:/data
    networks:
      - internal

  subscriber:
    image: ghcr.io/project-mikan/umi-mikan-subscriber:latest
    environment:
      TZ: Asia/Tokyo
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: prod-pass
      DB_NAME: umi_mikan
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SUBSCRIBER_MAX_CONCURRENT_JOBS: 20
    ports:
      - "2005:8082" # metrics endpoint
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_started
    networks:
      - internal

  scheduler:
    image: ghcr.io/project-mikan/umi-mikan-scheduler:latest
    environment:
      TZ: Asia/Tokyo
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: prod-pass
      DB_NAME: umi_mikan
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SCHEDULER_DAILY_INTERVAL: 10m
      SCHEDULER_MONTHLY_INTERVAL: 30m
    ports:
      - "2006:8081" # metrics endpoint
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - internal

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "2007:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_volume:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    depends_on:
      - scheduler
      - subscriber
    networks:
      - internal

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "2008:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_prod_volume:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - internal

  # Development tools service for running database migrations and other dev tasks
  dev-tools:
    build:
      context: ./backend
      dockerfile: ../infra/prod/dev-tools/Dockerfile
    volumes:
      - ./backend:/backend
      - ./proto:/proto
      - ./schema:/schema
    environment:
      TZ: Asia/Tokyo
      PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: prod-pass
      DB_NAME: umi_mikan
      REDIS_HOST: redis
      REDIS_PORT: 6379
    tty: true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: always
    ports:
      - "2009:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - internal

  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    ports:
      - "2010:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_prod_volume:/loki
    command: -config.file=/etc/loki/local-config.yaml
    user: "0"
    networks:
      - internal

  alloy:
    image: grafana/alloy:latest
    restart: unless-stopped
    ports:
      - "2011:12345"
    volumes:
      - ./monitoring/alloy/alloy-config.alloy:/etc/alloy/config.alloy
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    depends_on:
      - loki
    networks:
      - internal

  tunnel:
    restart: always
    image: cloudflare/cloudflared
    command: tunnel run
    depends_on:
      - frontend
    environment:
      TUNNEL_TOKEN: ${TUNNEL_TOKEN}
    networks:
      - internal

volumes:
  postgres_prod_volume:
  redis_prod_volume:
  prometheus_prod_volume:
  grafana_prod_volume:
  loki_prod_volume:

networks:
  internal:
    driver: bridge
